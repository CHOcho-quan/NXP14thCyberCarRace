###############################################################################
#
# IAR ANSI C/C++ Compiler V8.20.1.14183/W32 for ARM       06/Jul/2019  22:02:01
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\IARworkspace\CamCar_IAR\source\Cam.c
#    Command line =  
#        -f C:\Users\57416\AppData\Local\Temp\EWFC08.tmp
#        (E:\IARworkspace\CamCar_IAR\source\Cam.c -lCN
#        E:\IARworkspace\CamCar_IAR\FLASH\List -lB
#        E:\IARworkspace\CamCar_IAR\FLASH\List -o
#        E:\IARworkspace\CamCar_IAR\FLASH\Obj --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --char_is_signed --fpu=None
#        --dlib_config "D:\Program
#        Files(x86)\IAR\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\IARworkspace\CamCar_IAR\source\ -I
#        E:\IARworkspace\CamCar_IAR\common\ -I E:\IARworkspace\CamCar_IAR\LPLD\
#        -I E:\IARworkspace\CamCar_IAR\LPLD\HW\ -I
#        E:\IARworkspace\CamCar_IAR\LPLD\DEV\ -Ol -I "D:\Program
#        Files(x86)\IAR\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  E:\IARworkspace\CamCar_IAR\FLASH\List\Cam.lst
#    Object file  =  E:\IARworkspace\CamCar_IAR\FLASH\Obj\Cam.o
#
###############################################################################

E:\IARworkspace\CamCar_IAR\source\Cam.c
      1          /*
      2          Arthor : Qian Qiyang (KisaragiAyanoo@twitter)
      3          Date : 2015/12/01
      4          License : MIT
      5          */
      6          
      7          #include "includes.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD409             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000C   0x408A             LSLS     R2,R2,R1
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable12  ;; 0xe000e100
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x0940             LSRS     R0,R0,#+5
   \   00000016   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     __NVIC_SetPriority: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD405             BMI.N    ??__NVIC_SetPriority_0
   \   00000006   0x0109             LSLS     R1,R1,#+4
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable11  ;; 0xe000e400
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x5411             STRB     R1,[R2, R0]
   \   00000010   0xE008             B.N      ??__NVIC_SetPriority_1
   \                     ??__NVIC_SetPriority_0: (+1)
   \   00000012   0x0109             LSLS     R1,R1,#+4
   \   00000014   0x.... 0x....      LDR.W    R2,??DataTable12_1  ;; 0xe000ed18
   \   00000018   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000001A   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000001E   0x4410             ADD      R0,R2,R0
   \   00000020   0xF800 0x1C04      STRB     R1,[R0, #-4]
   \                     ??__NVIC_SetPriority_1: (+1)
   \   00000024   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t NVIC_EncodePriority(uint32_t, uint32_t, uint32_t)
   \                     NVIC_EncodePriority: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000006   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \   0000000A   0x2B05             CMP      R3,#+5
   \   0000000C   0xD301             BCC.N    ??NVIC_EncodePriority_0
   \   0000000E   0x2304             MOVS     R3,#+4
   \   00000010   0xE001             B.N      ??NVIC_EncodePriority_1
   \                     ??NVIC_EncodePriority_0: (+1)
   \   00000012   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \                     ??NVIC_EncodePriority_1: (+1)
   \   00000016   0x1D04             ADDS     R4,R0,#+4
   \   00000018   0x2C07             CMP      R4,#+7
   \   0000001A   0xD201             BCS.N    ??NVIC_EncodePriority_2
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE000             B.N      ??NVIC_EncodePriority_3
   \                     ??NVIC_EncodePriority_2: (+1)
   \   00000020   0x1EC0             SUBS     R0,R0,#+3
   \                     ??NVIC_EncodePriority_3: (+1)
   \   00000022   0x2401             MOVS     R4,#+1
   \   00000024   0xFA14 0xF303      LSLS     R3,R4,R3
   \   00000028   0x1E5B             SUBS     R3,R3,#+1
   \   0000002A   0x4019             ANDS     R1,R3,R1
   \   0000002C   0x4081             LSLS     R1,R1,R0
   \   0000002E   0x2301             MOVS     R3,#+1
   \   00000030   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000034   0x1E40             SUBS     R0,R0,#+1
   \   00000036   0x4010             ANDS     R0,R0,R2
   \   00000038   0x4308             ORRS     R0,R0,R1
   \   0000003A   0xBC10             POP      {R4}
   \   0000003C   0x4770             BX       LR               ;; return
      8          
      9          // ====== Variables ======
     10          // ---- Global ----

   \                                 In section .bss, align 4
     11          u8 cam_buffer[IMG_ROWS][IMG_COLS];
   \                     cam_buffer:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
     12          ROAD road[ROAD_SIZE];
   \                     road:
   \   00000000                      DS8 600
     13          // ---- Local ----

   \                                 In section .bss, align 1
     14          u8 cam_row = 0, img_row = 0;
   \                     cam_row:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     img_row:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
     15          int thr = 65;
   \                     thr:
   \   00000000   0x00000041         DC32 65
     16          

   \                                 In section .bss, align 1
     17          u8 left_white, right_white;
   \                     left_white:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     right_white:
   \   00000000                      DS8 1
     18          

   \                                 In section .data, align 1
     19          u8 WID = 104;
   \                     WID:
   \   00000000   0x68               DC8 104

   \                                 In section .data, align 1
     20          u8 kp_dir = 30;
   \                     kp_dir:
   \   00000000   0x1E               DC8 30

   \                                 In section .data, align 1
     21          u8 kd_dir = 10;
   \                     kd_dir:
   \   00000000   0x0A               DC8 10

   \                                 In section .bss, align 4
     22          int dir=0;
   \                     dir:
   \   00000000                      DS8 4
     23          

   \                                 In section .bss, align 2
     24          u16 mid;  
   \                     mid:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     25          static int e;
   \                     e:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     26          static int last_e;
   \                     last_e:
   \   00000000                      DS8 4
     27          
     28          extern int motor_x;
     29          // ====== 
     30          
     31          /*
     32          void Cam_Algorithm(){
     33            static u8 img_row_used = 0;
     34            while(img_row_used ==  img_row%IMG_ROWS); // wait for a new row received
     35            
     36            // -- Handle the row --
     37            
     38            
     39            
     40            
     41            //  -- The row is used --
     42            img_row_used++;
     43            img_row_used%=IMG_ROWS;
     44          }
     45          */
     46          

   \                                 In section .text, align 2, keep-with-next
     47          void Cam_Cont_Init(){
     48            for(int i = 0; i < ROAD_SIZE ; i++)
   \                     Cam_Cont_Init: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE028             B.N      ??Cam_Cont_Init_0
     49            {
     50              road[i].left = WID/2;
   \                     ??Cam_Cont_Init_1: (+1)
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable11_1
   \   00000008   0x7809             LDRB     R1,[R1, #+0]
   \   0000000A   0x2202             MOVS     R2,#+2
   \   0000000C   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000010   0x.... 0x....      LDR.W    R2,??DataTable11_2
   \   00000014   0x230C             MOVS     R3,#+12
   \   00000016   0xFB03 0xF300      MUL      R3,R3,R0
   \   0000001A   0x50D1             STR      R1,[R2, R3]
     51              road[i].mid =  WID/2 + 1;
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable11_1
   \   00000020   0x7809             LDRB     R1,[R1, #+0]
   \   00000022   0x2202             MOVS     R2,#+2
   \   00000024   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000028   0x1C49             ADDS     R1,R1,#+1
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable11_2
   \   0000002E   0x230C             MOVS     R3,#+12
   \   00000030   0xFB03 0xF300      MUL      R3,R3,R0
   \   00000034   0x441A             ADD      R2,R2,R3
   \   00000036   0x6051             STR      R1,[R2, #+4]
     52              road[i].right = WID/2 + 2;
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable11_1
   \   0000003C   0x7809             LDRB     R1,[R1, #+0]
   \   0000003E   0x2202             MOVS     R2,#+2
   \   00000040   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000044   0x1C89             ADDS     R1,R1,#+2
   \   00000046   0x.... 0x....      LDR.W    R2,??DataTable11_2
   \   0000004A   0x230C             MOVS     R3,#+12
   \   0000004C   0xFB03 0xF300      MUL      R3,R3,R0
   \   00000050   0x441A             ADD      R2,R2,R3
   \   00000052   0x6091             STR      R1,[R2, #+8]
     53            }
   \   00000054   0x1C40             ADDS     R0,R0,#+1
   \                     ??Cam_Cont_Init_0: (+1)
   \   00000056   0x2832             CMP      R0,#+50
   \   00000058   0xDBD4             BLT.N    ??Cam_Cont_Init_1
     54            mid = 0;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   00000060   0x8008             STRH     R0,[R1, #+0]
     55            e =  0;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   00000068   0x6008             STR      R0,[R1, #+0]
     56            last_e = 0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable12_4
   \   00000070   0x6008             STR      R0,[R1, #+0]
     57          }
   \   00000072   0x4770             BX       LR               ;; return
     58          
     59          //@@@@@@@@@

   \                                 In section .text, align 2, keep-with-next
     60          void Cam_Con_2_line(){
   \                     Cam_Con_2_line: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     61            mid = road[28].mid * 0.8 + road[40].mid * 0.2;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000006   0xF8D0 0x0154      LDR      R0,[R0, #+340]
   \   0000000A   0x.... 0x....      BL       __aeabi_i2d
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable12_5  ;; 0x9999999a
   \   00000012   0x.... 0x....      LDR.W    R3,??DataTable12_6  ;; 0x3fe99999
   \   00000016   0x.... 0x....      BL       __aeabi_dmul
   \   0000001A   0x0004             MOVS     R4,R0
   \   0000001C   0x000D             MOVS     R5,R1
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000022   0xF8D0 0x01E4      LDR      R0,[R0, #+484]
   \   00000026   0x.... 0x....      BL       __aeabi_i2d
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable12_5  ;; 0x9999999a
   \   0000002E   0x.... 0x....      LDR.W    R3,??DataTable12_7  ;; 0x3fc99999
   \   00000032   0x.... 0x....      BL       __aeabi_dmul
   \   00000036   0x0022             MOVS     R2,R4
   \   00000038   0x002B             MOVS     R3,R5
   \   0000003A   0x.... 0x....      BL       __aeabi_dadd
   \   0000003E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   00000046   0x8008             STRH     R0,[R1, #+0]
     62            e = mid  - WID/2;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000004C   0x8801             LDRH     R1,[R0, #+0]
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000052   0x7800             LDRB     R0,[R0, #+0]
   \   00000054   0x2202             MOVS     R2,#+2
   \   00000056   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   0000005A   0x1A09             SUBS     R1,R1,R0
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000060   0x6001             STR      R1,[R0, #+0]
     63            dir = kp_dir * e + kd_dir * (e-last_e);
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable12_8
   \   00000066   0x7801             LDRB     R1,[R0, #+0]
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   0000006C   0x6802             LDR      R2,[R0, #+0]
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable12_9
   \   00000072   0x7803             LDRB     R3,[R0, #+0]
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000078   0x6804             LDR      R4,[R0, #+0]
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0x1A24             SUBS     R4,R4,R0
   \   00000082   0x4363             MULS     R3,R4,R3
   \   00000084   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   0000008C   0x6001             STR      R1,[R0, #+0]
     64            last_e = e;
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable12_4
   \   00000098   0x6008             STR      R0,[R1, #+0]
     65            Servo_Output(-dir);
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x4240             RSBS     R0,R0,#+0
   \   000000A2   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000A4   0x.... 0x....      BL       Servo_Output
     66          }
   \   000000A8   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     67          

   \                                 In section .text, align 2, keep-with-next
     68          int Cam_2_line(){
   \                     Cam_2_line: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     69            mid = road[28].mid * 0.8 + road[40].mid * 0.2;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000006   0xF8D0 0x0154      LDR      R0,[R0, #+340]
   \   0000000A   0x.... 0x....      BL       __aeabi_i2d
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable12_5  ;; 0x9999999a
   \   00000012   0x.... 0x....      LDR.W    R3,??DataTable12_6  ;; 0x3fe99999
   \   00000016   0x.... 0x....      BL       __aeabi_dmul
   \   0000001A   0x0004             MOVS     R4,R0
   \   0000001C   0x000D             MOVS     R5,R1
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000022   0xF8D0 0x01E4      LDR      R0,[R0, #+484]
   \   00000026   0x.... 0x....      BL       __aeabi_i2d
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable12_5  ;; 0x9999999a
   \   0000002E   0x.... 0x....      LDR.W    R3,??DataTable12_7  ;; 0x3fc99999
   \   00000032   0x.... 0x....      BL       __aeabi_dmul
   \   00000036   0x0022             MOVS     R2,R4
   \   00000038   0x002B             MOVS     R3,R5
   \   0000003A   0x.... 0x....      BL       __aeabi_dadd
   \   0000003E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   00000046   0x8008             STRH     R0,[R1, #+0]
     70            e = mid  - WID/2;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000004C   0x8801             LDRH     R1,[R0, #+0]
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000052   0x7800             LDRB     R0,[R0, #+0]
   \   00000054   0x2202             MOVS     R2,#+2
   \   00000056   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   0000005A   0x1A09             SUBS     R1,R1,R0
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000060   0x6001             STR      R1,[R0, #+0]
     71            dir = kp_dir * e + kd_dir * (e-last_e);
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable12_8
   \   00000066   0x7801             LDRB     R1,[R0, #+0]
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   0000006C   0x6802             LDR      R2,[R0, #+0]
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable12_9
   \   00000072   0x7803             LDRB     R3,[R0, #+0]
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000078   0x6804             LDR      R4,[R0, #+0]
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0x1A24             SUBS     R4,R4,R0
   \   00000082   0x4363             MULS     R3,R4,R3
   \   00000084   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   0000008C   0x6001             STR      R1,[R0, #+0]
     72            last_e = e;
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable12_4
   \   00000098   0x6008             STR      R0,[R1, #+0]
     73            return -dir;
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x4240             RSBS     R0,R0,#+0
   \   000000A2   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     74          }
     75          

   \                                 In section .text, align 2, keep-with-next
     76          int Cam_k(){
   \                     Cam_k: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
     77            double k1,k2,k3;
     78            k1 = (road[20].mid - road[0].mid) / 20;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000008   0xF8D0 0x10F4      LDR      R1,[R0, #+244]
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x1A09             SUBS     R1,R1,R0
   \   00000014   0x2014             MOVS     R0,#+20
   \   00000016   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   0000001A   0x.... 0x....      BL       __aeabi_i2d
   \   0000001E   0x0006             MOVS     R6,R0
   \   00000020   0x000F             MOVS     R7,R1
     79            k2 = (road[35].mid - road[15].mid) / 20;
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000026   0xF8D0 0x11A8      LDR      R1,[R0, #+424]
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   0000002E   0xF8D0 0x00B8      LDR      R0,[R0, #+184]
   \   00000032   0x1A09             SUBS     R1,R1,R0
   \   00000034   0x2014             MOVS     R0,#+20
   \   00000036   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   0000003A   0x.... 0x....      BL       __aeabi_i2d
   \   0000003E   0x0004             MOVS     R4,R0
   \   00000040   0x000D             MOVS     R5,R1
     80            k3 = (road[45].mid - road[30].mid) / 20;
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000046   0xF8D0 0x1220      LDR      R1,[R0, #+544]
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   0000004E   0xF8D0 0x016C      LDR      R0,[R0, #+364]
   \   00000052   0x1A09             SUBS     R1,R1,R0
   \   00000054   0x2014             MOVS     R0,#+20
   \   00000056   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   0000005A   0x.... 0x....      BL       __aeabi_i2d
   \   0000005E   0x4682             MOV      R10,R0
   \   00000060   0x468B             MOV      R11,R1
     81            
     82            mid = (k1*k2 + k2*k3 + k1*k3 + 6 * k1 + 4*k2 + 2*k3)/2 + road[28].mid; 
   \   00000062   0x0022             MOVS     R2,R4
   \   00000064   0x002B             MOVS     R3,R5
   \   00000066   0x0030             MOVS     R0,R6
   \   00000068   0x0039             MOVS     R1,R7
   \   0000006A   0x.... 0x....      BL       __aeabi_dmul
   \   0000006E   0x4680             MOV      R8,R0
   \   00000070   0x4689             MOV      R9,R1
   \   00000072   0x4652             MOV      R2,R10
   \   00000074   0x465B             MOV      R3,R11
   \   00000076   0x0020             MOVS     R0,R4
   \   00000078   0x0029             MOVS     R1,R5
   \   0000007A   0x.... 0x....      BL       __aeabi_dmul
   \   0000007E   0x4642             MOV      R2,R8
   \   00000080   0x464B             MOV      R3,R9
   \   00000082   0x.... 0x....      BL       __aeabi_dadd
   \   00000086   0x4680             MOV      R8,R0
   \   00000088   0x4689             MOV      R9,R1
   \   0000008A   0x4652             MOV      R2,R10
   \   0000008C   0x465B             MOV      R3,R11
   \   0000008E   0x0030             MOVS     R0,R6
   \   00000090   0x0039             MOVS     R1,R7
   \   00000092   0x.... 0x....      BL       __aeabi_dmul
   \   00000096   0x4642             MOV      R2,R8
   \   00000098   0x464B             MOV      R3,R9
   \   0000009A   0x.... 0x....      BL       __aeabi_dadd
   \   0000009E   0x4680             MOV      R8,R0
   \   000000A0   0x4689             MOV      R9,R1
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable12_11  ;; 0x40180000
   \   000000A8   0x0032             MOVS     R2,R6
   \   000000AA   0x003B             MOVS     R3,R7
   \   000000AC   0x.... 0x....      BL       __aeabi_dmul
   \   000000B0   0x4642             MOV      R2,R8
   \   000000B2   0x464B             MOV      R3,R9
   \   000000B4   0x.... 0x....      BL       __aeabi_dadd
   \   000000B8   0x0006             MOVS     R6,R0
   \   000000BA   0x000F             MOVS     R7,R1
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable12_12  ;; 0x40100000
   \   000000C2   0x0022             MOVS     R2,R4
   \   000000C4   0x002B             MOVS     R3,R5
   \   000000C6   0x.... 0x....      BL       __aeabi_dmul
   \   000000CA   0x0032             MOVS     R2,R6
   \   000000CC   0x003B             MOVS     R3,R7
   \   000000CE   0x.... 0x....      BL       __aeabi_dadd
   \   000000D2   0x0004             MOVS     R4,R0
   \   000000D4   0x000D             MOVS     R5,R1
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   000000DC   0x4652             MOV      R2,R10
   \   000000DE   0x465B             MOV      R3,R11
   \   000000E0   0x.... 0x....      BL       __aeabi_dmul
   \   000000E4   0x0022             MOVS     R2,R4
   \   000000E6   0x002B             MOVS     R3,R5
   \   000000E8   0x.... 0x....      BL       __aeabi_dadd
   \   000000EC   0x2200             MOVS     R2,#+0
   \   000000EE   0xF05F 0x4380      MOVS     R3,#+1073741824
   \   000000F2   0x.... 0x....      BL       __aeabi_ddiv
   \   000000F6   0x0004             MOVS     R4,R0
   \   000000F8   0x000D             MOVS     R5,R1
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   000000FE   0xF8D0 0x0154      LDR      R0,[R0, #+340]
   \   00000102   0x.... 0x....      BL       __aeabi_i2d
   \   00000106   0x0022             MOVS     R2,R4
   \   00000108   0x002B             MOVS     R3,R5
   \   0000010A   0x.... 0x....      BL       __aeabi_dadd
   \   0000010E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000112   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   00000116   0x8008             STRH     R0,[R1, #+0]
     83            
     84            e = mid  - WID/2;
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000011C   0x8801             LDRH     R1,[R0, #+0]
   \   0000011E   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000122   0x7800             LDRB     R0,[R0, #+0]
   \   00000124   0x2202             MOVS     R2,#+2
   \   00000126   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   0000012A   0x1A09             SUBS     R1,R1,R0
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000130   0x6001             STR      R1,[R0, #+0]
     85            dir = kp_dir * e + kd_dir * (e-last_e);
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable12_8
   \   00000136   0x7801             LDRB     R1,[R0, #+0]
   \   00000138   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   0000013C   0x6802             LDR      R2,[R0, #+0]
   \   0000013E   0x.... 0x....      LDR.W    R0,??DataTable12_9
   \   00000142   0x7803             LDRB     R3,[R0, #+0]
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000148   0x6804             LDR      R4,[R0, #+0]
   \   0000014A   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   0000014E   0x6800             LDR      R0,[R0, #+0]
   \   00000150   0x1A24             SUBS     R4,R4,R0
   \   00000152   0x4363             MULS     R3,R4,R3
   \   00000154   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   00000158   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   0000015C   0x6001             STR      R1,[R0, #+0]
     86            last_e = e;
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000162   0x6800             LDR      R0,[R0, #+0]
   \   00000164   0x.... 0x....      LDR.W    R1,??DataTable12_4
   \   00000168   0x6008             STR      R0,[R1, #+0]
     87            return -dir;
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   0000016E   0x6800             LDR      R0,[R0, #+0]
   \   00000170   0x4240             RSBS     R0,R0,#+0
   \   00000172   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
     88          }
     89          
     90          
     91          //@@@@@@@@@@

   \                                 In section .text, align 2, keep-with-next
     92          void Cam_Con_k(){
   \                     Cam_Con_k: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
     93            double k1,k2,k3;
     94            k1 = (road[20].mid - road[0].mid) / 20;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000008   0xF8D0 0x10F4      LDR      R1,[R0, #+244]
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x1A09             SUBS     R1,R1,R0
   \   00000014   0x2014             MOVS     R0,#+20
   \   00000016   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   0000001A   0x.... 0x....      BL       __aeabi_i2d
   \   0000001E   0x0006             MOVS     R6,R0
   \   00000020   0x000F             MOVS     R7,R1
     95            k2 = (road[35].mid - road[15].mid) / 20;
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000026   0xF8D0 0x11A8      LDR      R1,[R0, #+424]
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   0000002E   0xF8D0 0x00B8      LDR      R0,[R0, #+184]
   \   00000032   0x1A09             SUBS     R1,R1,R0
   \   00000034   0x2014             MOVS     R0,#+20
   \   00000036   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   0000003A   0x.... 0x....      BL       __aeabi_i2d
   \   0000003E   0x0004             MOVS     R4,R0
   \   00000040   0x000D             MOVS     R5,R1
     96            k3 = (road[45].mid - road[30].mid) / 20;
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000046   0xF8D0 0x1220      LDR      R1,[R0, #+544]
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   0000004E   0xF8D0 0x016C      LDR      R0,[R0, #+364]
   \   00000052   0x1A09             SUBS     R1,R1,R0
   \   00000054   0x2014             MOVS     R0,#+20
   \   00000056   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   0000005A   0x.... 0x....      BL       __aeabi_i2d
   \   0000005E   0x4682             MOV      R10,R0
   \   00000060   0x468B             MOV      R11,R1
     97            
     98            mid = (k1*k2 + k2*k3 + k1*k3 + 6 * k1 + 4*k2 + 2*k3)/2 + road[28].mid; 
   \   00000062   0x0022             MOVS     R2,R4
   \   00000064   0x002B             MOVS     R3,R5
   \   00000066   0x0030             MOVS     R0,R6
   \   00000068   0x0039             MOVS     R1,R7
   \   0000006A   0x.... 0x....      BL       __aeabi_dmul
   \   0000006E   0x4680             MOV      R8,R0
   \   00000070   0x4689             MOV      R9,R1
   \   00000072   0x4652             MOV      R2,R10
   \   00000074   0x465B             MOV      R3,R11
   \   00000076   0x0020             MOVS     R0,R4
   \   00000078   0x0029             MOVS     R1,R5
   \   0000007A   0x.... 0x....      BL       __aeabi_dmul
   \   0000007E   0x4642             MOV      R2,R8
   \   00000080   0x464B             MOV      R3,R9
   \   00000082   0x.... 0x....      BL       __aeabi_dadd
   \   00000086   0x4680             MOV      R8,R0
   \   00000088   0x4689             MOV      R9,R1
   \   0000008A   0x4652             MOV      R2,R10
   \   0000008C   0x465B             MOV      R3,R11
   \   0000008E   0x0030             MOVS     R0,R6
   \   00000090   0x0039             MOVS     R1,R7
   \   00000092   0x.... 0x....      BL       __aeabi_dmul
   \   00000096   0x4642             MOV      R2,R8
   \   00000098   0x464B             MOV      R3,R9
   \   0000009A   0x.... 0x....      BL       __aeabi_dadd
   \   0000009E   0x4680             MOV      R8,R0
   \   000000A0   0x4689             MOV      R9,R1
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable12_11  ;; 0x40180000
   \   000000A8   0x0032             MOVS     R2,R6
   \   000000AA   0x003B             MOVS     R3,R7
   \   000000AC   0x.... 0x....      BL       __aeabi_dmul
   \   000000B0   0x4642             MOV      R2,R8
   \   000000B2   0x464B             MOV      R3,R9
   \   000000B4   0x.... 0x....      BL       __aeabi_dadd
   \   000000B8   0x0006             MOVS     R6,R0
   \   000000BA   0x000F             MOVS     R7,R1
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable12_12  ;; 0x40100000
   \   000000C2   0x0022             MOVS     R2,R4
   \   000000C4   0x002B             MOVS     R3,R5
   \   000000C6   0x.... 0x....      BL       __aeabi_dmul
   \   000000CA   0x0032             MOVS     R2,R6
   \   000000CC   0x003B             MOVS     R3,R7
   \   000000CE   0x.... 0x....      BL       __aeabi_dadd
   \   000000D2   0x0004             MOVS     R4,R0
   \   000000D4   0x000D             MOVS     R5,R1
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   000000DC   0x4652             MOV      R2,R10
   \   000000DE   0x465B             MOV      R3,R11
   \   000000E0   0x.... 0x....      BL       __aeabi_dmul
   \   000000E4   0x0022             MOVS     R2,R4
   \   000000E6   0x002B             MOVS     R3,R5
   \   000000E8   0x.... 0x....      BL       __aeabi_dadd
   \   000000EC   0x2200             MOVS     R2,#+0
   \   000000EE   0xF05F 0x4380      MOVS     R3,#+1073741824
   \   000000F2   0x.... 0x....      BL       __aeabi_ddiv
   \   000000F6   0x0004             MOVS     R4,R0
   \   000000F8   0x000D             MOVS     R5,R1
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   000000FE   0xF8D0 0x0154      LDR      R0,[R0, #+340]
   \   00000102   0x.... 0x....      BL       __aeabi_i2d
   \   00000106   0x0022             MOVS     R2,R4
   \   00000108   0x002B             MOVS     R3,R5
   \   0000010A   0x.... 0x....      BL       __aeabi_dadd
   \   0000010E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000112   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   00000116   0x8008             STRH     R0,[R1, #+0]
     99            
    100            e = mid  - WID/2;
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000011C   0x8801             LDRH     R1,[R0, #+0]
   \   0000011E   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000122   0x7800             LDRB     R0,[R0, #+0]
   \   00000124   0x2202             MOVS     R2,#+2
   \   00000126   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   0000012A   0x1A09             SUBS     R1,R1,R0
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000130   0x6001             STR      R1,[R0, #+0]
    101            dir = kp_dir * e + kd_dir * (e-last_e);
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable12_8
   \   00000136   0x7801             LDRB     R1,[R0, #+0]
   \   00000138   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   0000013C   0x6802             LDR      R2,[R0, #+0]
   \   0000013E   0x.... 0x....      LDR.W    R0,??DataTable12_9
   \   00000142   0x7803             LDRB     R3,[R0, #+0]
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000148   0x6804             LDR      R4,[R0, #+0]
   \   0000014A   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   0000014E   0x6800             LDR      R0,[R0, #+0]
   \   00000150   0x1A24             SUBS     R4,R4,R0
   \   00000152   0x4363             MULS     R3,R4,R3
   \   00000154   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   00000158   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   0000015C   0x6001             STR      R1,[R0, #+0]
    102            last_e = e;
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000162   0x6800             LDR      R0,[R0, #+0]
   \   00000164   0x.... 0x....      LDR.W    R1,??DataTable12_4
   \   00000168   0x6008             STR      R0,[R1, #+0]
    103            Servo_Output(-dir);
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   0000016E   0x6800             LDR      R0,[R0, #+0]
   \   00000170   0x4240             RSBS     R0,R0,#+0
   \   00000172   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000174   0x.... 0x....      BL       Servo_Output
    104          }
   \   00000178   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    105          
    106          //@@@@@@@@@@@@

   \                                 In section .text, align 2, keep-with-next
    107          void Speed_k(){
   \                     Speed_k: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
    108            double k1,k2,k3;
    109            k1 = (road[20].mid - road[0].mid)/20;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000008   0xF8D0 0x10F4      LDR      R1,[R0, #+244]
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x1A09             SUBS     R1,R1,R0
   \   00000014   0x2014             MOVS     R0,#+20
   \   00000016   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   0000001A   0x.... 0x....      BL       __aeabi_i2d
   \   0000001E   0x0006             MOVS     R6,R0
   \   00000020   0x000F             MOVS     R7,R1
    110            k2 = (road[35].mid - road[15].mid)/20;
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000026   0xF8D0 0x11A8      LDR      R1,[R0, #+424]
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   0000002E   0xF8D0 0x00B8      LDR      R0,[R0, #+184]
   \   00000032   0x1A09             SUBS     R1,R1,R0
   \   00000034   0x2014             MOVS     R0,#+20
   \   00000036   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   0000003A   0x.... 0x....      BL       __aeabi_i2d
   \   0000003E   0x0004             MOVS     R4,R0
   \   00000040   0x000D             MOVS     R5,R1
    111            k3 = (road[45].mid - road[30].mid)/20;
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000046   0xF8D0 0x1220      LDR      R1,[R0, #+544]
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   0000004E   0xF8D0 0x016C      LDR      R0,[R0, #+364]
   \   00000052   0x1A09             SUBS     R1,R1,R0
   \   00000054   0x2014             MOVS     R0,#+20
   \   00000056   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   0000005A   0x.... 0x....      BL       __aeabi_i2d
   \   0000005E   0x4680             MOV      R8,R0
   \   00000060   0x4689             MOV      R9,R1
    112            
    113            if(abs(dir)<50) motor_x =170;
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x2801             CMP      R0,#+1
   \   0000006A   0xDB03             BLT.N    ??Speed_k_0
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0xE003             B.N      ??Speed_k_1
   \                     ??Speed_k_0: (+1)
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x4240             RSBS     R0,R0,#+0
   \                     ??Speed_k_1: (+1)
   \   0000007C   0x2832             CMP      R0,#+50
   \   0000007E   0xDA03             BGE.N    ??Speed_k_2
   \   00000080   0x20AA             MOVS     R0,#+170
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable12_13
   \   00000086   0x6008             STR      R0,[R1, #+0]
    114            if(abs(dir)>=50 && abs(dir)<150) motor_x = 150;
   \                     ??Speed_k_2: (+1)
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x2801             CMP      R0,#+1
   \   00000090   0xDB03             BLT.N    ??Speed_k_3
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0xE003             B.N      ??Speed_k_4
   \                     ??Speed_k_3: (+1)
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x4240             RSBS     R0,R0,#+0
   \                     ??Speed_k_4: (+1)
   \   000000A2   0x2832             CMP      R0,#+50
   \   000000A4   0xDB12             BLT.N    ??Speed_k_5
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x2801             CMP      R0,#+1
   \   000000AE   0xDB03             BLT.N    ??Speed_k_6
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0xE003             B.N      ??Speed_k_7
   \                     ??Speed_k_6: (+1)
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   000000BC   0x6800             LDR      R0,[R0, #+0]
   \   000000BE   0x4240             RSBS     R0,R0,#+0
   \                     ??Speed_k_7: (+1)
   \   000000C0   0x2896             CMP      R0,#+150
   \   000000C2   0xDA03             BGE.N    ??Speed_k_5
   \   000000C4   0x2096             MOVS     R0,#+150
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable12_13
   \   000000CA   0x6008             STR      R0,[R1, #+0]
    115            if(abs(dir)>150) motor_x = 140;
   \                     ??Speed_k_5: (+1)
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x2801             CMP      R0,#+1
   \   000000D4   0xDB03             BLT.N    ??Speed_k_8
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   000000DA   0x6800             LDR      R0,[R0, #+0]
   \   000000DC   0xE003             B.N      ??Speed_k_9
   \                     ??Speed_k_8: (+1)
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   000000E2   0x6800             LDR      R0,[R0, #+0]
   \   000000E4   0x4240             RSBS     R0,R0,#+0
   \                     ??Speed_k_9: (+1)
   \   000000E6   0x2897             CMP      R0,#+151
   \   000000E8   0xDB03             BLT.N    ??Speed_k_10
   \   000000EA   0x208C             MOVS     R0,#+140
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable12_13
   \   000000F0   0x6008             STR      R0,[R1, #+0]
    116            
    117            if(abs(k1)<0.2 && abs(k2)<0.2 && abs(k3)<0.2)motor_x += 10;
   \                     ??Speed_k_10: (+1)
   \   000000F2   0x0030             MOVS     R0,R6
   \   000000F4   0x0039             MOVS     R1,R7
   \   000000F6   0x2200             MOVS     R2,#+0
   \   000000F8   0x2300             MOVS     R3,#+0
   \   000000FA   0x.... 0x....      BL       __aeabi_cdrcmple
   \   000000FE   0xD202             BCS.N    ??Speed_k_11
   \   00000100   0x0030             MOVS     R0,R6
   \   00000102   0x0039             MOVS     R1,R7
   \   00000104   0xE003             B.N      ??Speed_k_12
   \                     ??Speed_k_11: (+1)
   \   00000106   0x0030             MOVS     R0,R6
   \   00000108   0x0039             MOVS     R1,R7
   \   0000010A   0xF091 0x4100      EORS     R1,R1,#0x80000000
   \                     ??Speed_k_12: (+1)
   \   0000010E   0x.... 0x....      LDR.W    R2,??DataTable12_5  ;; 0x9999999a
   \   00000112   0x.... 0x....      LDR.W    R3,??DataTable12_7  ;; 0x3fc99999
   \   00000116   0x.... 0x....      BL       __aeabi_cdcmple
   \   0000011A   0xD231             BCS.N    ??Speed_k_13
   \   0000011C   0x0020             MOVS     R0,R4
   \   0000011E   0x0029             MOVS     R1,R5
   \   00000120   0x2200             MOVS     R2,#+0
   \   00000122   0x2300             MOVS     R3,#+0
   \   00000124   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000128   0xD202             BCS.N    ??Speed_k_14
   \   0000012A   0x0020             MOVS     R0,R4
   \   0000012C   0x0029             MOVS     R1,R5
   \   0000012E   0xE003             B.N      ??Speed_k_15
   \                     ??Speed_k_14: (+1)
   \   00000130   0x0020             MOVS     R0,R4
   \   00000132   0x0029             MOVS     R1,R5
   \   00000134   0xF091 0x4100      EORS     R1,R1,#0x80000000
   \                     ??Speed_k_15: (+1)
   \   00000138   0x.... 0x....      LDR.W    R2,??DataTable12_5  ;; 0x9999999a
   \   0000013C   0x.... 0x....      LDR.W    R3,??DataTable12_7  ;; 0x3fc99999
   \   00000140   0x.... 0x....      BL       __aeabi_cdcmple
   \   00000144   0xD21C             BCS.N    ??Speed_k_13
   \   00000146   0x4640             MOV      R0,R8
   \   00000148   0x4649             MOV      R1,R9
   \   0000014A   0x2200             MOVS     R2,#+0
   \   0000014C   0x2300             MOVS     R3,#+0
   \   0000014E   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000152   0xD202             BCS.N    ??Speed_k_16
   \   00000154   0x4640             MOV      R0,R8
   \   00000156   0x4649             MOV      R1,R9
   \   00000158   0xE003             B.N      ??Speed_k_17
   \                     ??Speed_k_16: (+1)
   \   0000015A   0x4640             MOV      R0,R8
   \   0000015C   0x4649             MOV      R1,R9
   \   0000015E   0xF091 0x4100      EORS     R1,R1,#0x80000000
   \                     ??Speed_k_17: (+1)
   \   00000162   0x.... 0x....      LDR.W    R2,??DataTable12_5  ;; 0x9999999a
   \   00000166   0x.... 0x....      LDR.W    R3,??DataTable12_7  ;; 0x3fc99999
   \   0000016A   0x.... 0x....      BL       __aeabi_cdcmple
   \   0000016E   0xD207             BCS.N    ??Speed_k_13
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable12_13
   \   00000174   0x6800             LDR      R0,[R0, #+0]
   \   00000176   0x300A             ADDS     R0,R0,#+10
   \   00000178   0x.... 0x....      LDR.W    R1,??DataTable12_13
   \   0000017C   0x6008             STR      R0,[R1, #+0]
   \   0000017E   0xE04C             B.N      ??Speed_k_18
    118            else if(abs(k1)<0.3 && abs(k2)<0.3 && abs(k3)<0.3)motor_x += 5;
   \                     ??Speed_k_13: (+1)
   \   00000180   0x0030             MOVS     R0,R6
   \   00000182   0x0039             MOVS     R1,R7
   \   00000184   0x2200             MOVS     R2,#+0
   \   00000186   0x2300             MOVS     R3,#+0
   \   00000188   0x.... 0x....      BL       __aeabi_cdrcmple
   \   0000018C   0xD202             BCS.N    ??Speed_k_19
   \   0000018E   0x0030             MOVS     R0,R6
   \   00000190   0x0039             MOVS     R1,R7
   \   00000192   0xE003             B.N      ??Speed_k_20
   \                     ??Speed_k_19: (+1)
   \   00000194   0xF097 0x4700      EORS     R7,R7,#0x80000000
   \   00000198   0x0030             MOVS     R0,R6
   \   0000019A   0x0039             MOVS     R1,R7
   \                     ??Speed_k_20: (+1)
   \   0000019C   0xF05F 0x3233      MOVS     R2,#+858993459
   \   000001A0   0x.... 0x....      LDR.W    R3,??DataTable12_14  ;; 0x3fd33333
   \   000001A4   0x.... 0x....      BL       __aeabi_cdcmple
   \   000001A8   0xD231             BCS.N    ??Speed_k_21
   \   000001AA   0x0020             MOVS     R0,R4
   \   000001AC   0x0029             MOVS     R1,R5
   \   000001AE   0x2200             MOVS     R2,#+0
   \   000001B0   0x2300             MOVS     R3,#+0
   \   000001B2   0x.... 0x....      BL       __aeabi_cdrcmple
   \   000001B6   0xD202             BCS.N    ??Speed_k_22
   \   000001B8   0x0020             MOVS     R0,R4
   \   000001BA   0x0029             MOVS     R1,R5
   \   000001BC   0xE003             B.N      ??Speed_k_23
   \                     ??Speed_k_22: (+1)
   \   000001BE   0xF095 0x4500      EORS     R5,R5,#0x80000000
   \   000001C2   0x0020             MOVS     R0,R4
   \   000001C4   0x0029             MOVS     R1,R5
   \                     ??Speed_k_23: (+1)
   \   000001C6   0xF05F 0x3233      MOVS     R2,#+858993459
   \   000001CA   0x.... 0x....      LDR.W    R3,??DataTable12_14  ;; 0x3fd33333
   \   000001CE   0x.... 0x....      BL       __aeabi_cdcmple
   \   000001D2   0xD21C             BCS.N    ??Speed_k_21
   \   000001D4   0x4640             MOV      R0,R8
   \   000001D6   0x4649             MOV      R1,R9
   \   000001D8   0x2200             MOVS     R2,#+0
   \   000001DA   0x2300             MOVS     R3,#+0
   \   000001DC   0x.... 0x....      BL       __aeabi_cdrcmple
   \   000001E0   0xD202             BCS.N    ??Speed_k_24
   \   000001E2   0x4640             MOV      R0,R8
   \   000001E4   0x4649             MOV      R1,R9
   \   000001E6   0xE003             B.N      ??Speed_k_25
   \                     ??Speed_k_24: (+1)
   \   000001E8   0xF099 0x4900      EORS     R9,R9,#0x80000000
   \   000001EC   0x4640             MOV      R0,R8
   \   000001EE   0x4649             MOV      R1,R9
   \                     ??Speed_k_25: (+1)
   \   000001F0   0xF05F 0x3233      MOVS     R2,#+858993459
   \   000001F4   0x.... 0x....      LDR.W    R3,??DataTable12_14  ;; 0x3fd33333
   \   000001F8   0x.... 0x....      BL       __aeabi_cdcmple
   \   000001FC   0xD207             BCS.N    ??Speed_k_21
   \   000001FE   0x.... 0x....      LDR.W    R0,??DataTable12_13
   \   00000202   0x6800             LDR      R0,[R0, #+0]
   \   00000204   0x1D40             ADDS     R0,R0,#+5
   \   00000206   0x.... 0x....      LDR.W    R1,??DataTable12_13
   \   0000020A   0x6008             STR      R0,[R1, #+0]
   \   0000020C   0xE005             B.N      ??Speed_k_18
    119            else motor_x += 0;
   \                     ??Speed_k_21: (+1)
   \   0000020E   0x.... 0x....      LDR.W    R0,??DataTable12_13
   \   00000212   0x6800             LDR      R0,[R0, #+0]
   \   00000214   0x.... 0x....      LDR.W    R1,??DataTable12_13
   \   00000218   0x6008             STR      R0,[R1, #+0]
    120            
    121          }
   \                     ??Speed_k_18: (+1)
   \   0000021A   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    122          
    123          
    124          

   \                                 In section .text, align 2, keep-with-next
    125          void road_value()
    126          {
    127            for( int i = 0; i < ROAD_SIZE ; i++)
   \                     road_value: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE044             B.N      ??road_value_0
    128            {
    129              int j;
    130              for(j = road[i].mid ; j> 5 ;j--)
    131              {
    132                if(cam_buffer[i][j]< thr && cam_buffer[i][j - 1]< thr && cam_buffer[i][j - 2]< thr) break;
    133              }
    134              road[i].left = j;
    135              
    136              for(j = road[i].mid ; j< 115 ;j++)
   \                     ??road_value_1: (+1)
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \                     ??road_value_2: (+1)
   \   00000006   0x2873             CMP      R0,#+115
   \   00000008   0xDA25             BGE.N    ??road_value_3
    137              {
    138                if(cam_buffer[i][j] < thr && cam_buffer[i][j + 1]< thr && cam_buffer[i][j + 2]< thr) break;
   \   0000000A   0x.... 0x....      LDR.W    R2,??DataTable12_15
   \   0000000E   0x2380             MOVS     R3,#+128
   \   00000010   0xFB03 0xF301      MUL      R3,R3,R1
   \   00000014   0x441A             ADD      R2,R2,R3
   \   00000016   0x5C12             LDRB     R2,[R2, R0]
   \   00000018   0x.... 0x....      LDR.W    R3,??DataTable12_16
   \   0000001C   0x681B             LDR      R3,[R3, #+0]
   \   0000001E   0x429A             CMP      R2,R3
   \   00000020   0xDAF0             BGE.N    ??road_value_1
   \   00000022   0x.... 0x....      LDR.W    R2,??DataTable12_15
   \   00000026   0x2380             MOVS     R3,#+128
   \   00000028   0xFB03 0xF301      MUL      R3,R3,R1
   \   0000002C   0x441A             ADD      R2,R2,R3
   \   0000002E   0x4402             ADD      R2,R2,R0
   \   00000030   0x7852             LDRB     R2,[R2, #+1]
   \   00000032   0x.... 0x....      LDR.W    R3,??DataTable12_16
   \   00000036   0x681B             LDR      R3,[R3, #+0]
   \   00000038   0x429A             CMP      R2,R3
   \   0000003A   0xDAE3             BGE.N    ??road_value_1
   \   0000003C   0x.... 0x....      LDR.W    R2,??DataTable12_15
   \   00000040   0x2380             MOVS     R3,#+128
   \   00000042   0xFB03 0xF301      MUL      R3,R3,R1
   \   00000046   0x441A             ADD      R2,R2,R3
   \   00000048   0x4402             ADD      R2,R2,R0
   \   0000004A   0x7892             LDRB     R2,[R2, #+2]
   \   0000004C   0x.... 0x....      LDR.W    R3,??DataTable12_16
   \   00000050   0x681B             LDR      R3,[R3, #+0]
   \   00000052   0x429A             CMP      R2,R3
   \   00000054   0xDAD6             BGE.N    ??road_value_1
    139              }
    140              road[i].right = j;
   \                     ??road_value_3: (+1)
   \   00000056   0x....             LDR.N    R2,??DataTable11_2
   \   00000058   0x230C             MOVS     R3,#+12
   \   0000005A   0xFB03 0xF301      MUL      R3,R3,R1
   \   0000005E   0x441A             ADD      R2,R2,R3
   \   00000060   0x6090             STR      R0,[R2, #+8]
    141              road[i].mid = (road[i].left + road[i].right) / 2;
   \   00000062   0x....             LDR.N    R0,??DataTable11_2
   \   00000064   0x220C             MOVS     R2,#+12
   \   00000066   0xFB02 0xF201      MUL      R2,R2,R1
   \   0000006A   0x5882             LDR      R2,[R0, R2]
   \   0000006C   0x....             LDR.N    R0,??DataTable11_2
   \   0000006E   0x230C             MOVS     R3,#+12
   \   00000070   0xFB03 0xF301      MUL      R3,R3,R1
   \   00000074   0x4418             ADD      R0,R0,R3
   \   00000076   0x6880             LDR      R0,[R0, #+8]
   \   00000078   0x1882             ADDS     R2,R0,R2
   \   0000007A   0x2002             MOVS     R0,#+2
   \   0000007C   0xFB92 0xF0F0      SDIV     R0,R2,R0
   \   00000080   0x....             LDR.N    R2,??DataTable11_2
   \   00000082   0x230C             MOVS     R3,#+12
   \   00000084   0xFB03 0xF301      MUL      R3,R3,R1
   \   00000088   0x441A             ADD      R2,R2,R3
   \   0000008A   0x6050             STR      R0,[R2, #+4]
   \   0000008C   0x1C49             ADDS     R1,R1,#+1
   \                     ??road_value_0: (+1)
   \   0000008E   0x2932             CMP      R1,#+50
   \   00000090   0xDA3D             BGE.N    ??road_value_4
   \   00000092   0x....             LDR.N    R0,??DataTable11_2
   \   00000094   0x220C             MOVS     R2,#+12
   \   00000096   0xFB02 0xF201      MUL      R2,R2,R1
   \   0000009A   0x4410             ADD      R0,R0,R2
   \   0000009C   0x6840             LDR      R0,[R0, #+4]
   \   0000009E   0xE000             B.N      ??road_value_5
   \                     ??road_value_6: (+1)
   \   000000A0   0x1E40             SUBS     R0,R0,#+1
   \                     ??road_value_5: (+1)
   \   000000A2   0x2806             CMP      R0,#+6
   \   000000A4   0xDB27             BLT.N    ??road_value_7
   \   000000A6   0x.... 0x....      LDR.W    R2,??DataTable12_15
   \   000000AA   0x2380             MOVS     R3,#+128
   \   000000AC   0xFB03 0xF301      MUL      R3,R3,R1
   \   000000B0   0x441A             ADD      R2,R2,R3
   \   000000B2   0x5C12             LDRB     R2,[R2, R0]
   \   000000B4   0x.... 0x....      LDR.W    R3,??DataTable12_16
   \   000000B8   0x681B             LDR      R3,[R3, #+0]
   \   000000BA   0x429A             CMP      R2,R3
   \   000000BC   0xDAF0             BGE.N    ??road_value_6
   \   000000BE   0x.... 0x....      LDR.W    R2,??DataTable12_15
   \   000000C2   0x2380             MOVS     R3,#+128
   \   000000C4   0xFB03 0xF301      MUL      R3,R3,R1
   \   000000C8   0x441A             ADD      R2,R2,R3
   \   000000CA   0x4402             ADD      R2,R2,R0
   \   000000CC   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   000000D0   0x.... 0x....      LDR.W    R3,??DataTable12_16
   \   000000D4   0x681B             LDR      R3,[R3, #+0]
   \   000000D6   0x429A             CMP      R2,R3
   \   000000D8   0xDAE2             BGE.N    ??road_value_6
   \   000000DA   0x.... 0x....      LDR.W    R2,??DataTable12_15
   \   000000DE   0x2380             MOVS     R3,#+128
   \   000000E0   0xFB03 0xF301      MUL      R3,R3,R1
   \   000000E4   0x441A             ADD      R2,R2,R3
   \   000000E6   0x4402             ADD      R2,R2,R0
   \   000000E8   0xF812 0x2C02      LDRB     R2,[R2, #-2]
   \   000000EC   0x.... 0x....      LDR.W    R3,??DataTable12_16
   \   000000F0   0x681B             LDR      R3,[R3, #+0]
   \   000000F2   0x429A             CMP      R2,R3
   \   000000F4   0xDAD4             BGE.N    ??road_value_6
   \                     ??road_value_7: (+1)
   \   000000F6   0x....             LDR.N    R2,??DataTable11_2
   \   000000F8   0x230C             MOVS     R3,#+12
   \   000000FA   0xFB03 0xF301      MUL      R3,R3,R1
   \   000000FE   0x50D0             STR      R0,[R2, R3]
   \   00000100   0x....             LDR.N    R0,??DataTable11_2
   \   00000102   0x220C             MOVS     R2,#+12
   \   00000104   0xFB02 0xF201      MUL      R2,R2,R1
   \   00000108   0x4410             ADD      R0,R0,R2
   \   0000010A   0x6840             LDR      R0,[R0, #+4]
   \   0000010C   0xE77B             B.N      ??road_value_2
    142            }
    143          }
   \                     ??road_value_4: (+1)
   \   0000010E   0x4770             BX       LR               ;; return
    144          

   \                                 In section .text, align 2, keep-with-next
    145          void Cam_Algorithm(){
    146            static u8 img_row_used = 0;
    147            while(img_row_used ==  img_row%IMG_ROWS); // wait for a new row received
   \                     Cam_Algorithm: (+1)
   \                     ??Cam_Algorithm_0: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12_17
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x2140             MOVS     R1,#+64
   \   00000006   0x....             LDR.N    R2,??DataTable12_18
   \   00000008   0x7812             LDRB     R2,[R2, #+0]
   \   0000000A   0xFB90 0xF3F1      SDIV     R3,R0,R1
   \   0000000E   0xFB01 0x0013      MLS      R0,R1,R3,R0
   \   00000012   0x4282             CMP      R2,R0
   \   00000014   0xD0F4             BEQ.N    ??Cam_Algorithm_0
    148            
    149            // -- Handle the row --
    150            
    151            //  -- The row is used --
    152            img_row_used++;
   \   00000016   0x....             LDR.N    R0,??DataTable12_18
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable12_18
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
    153            img_row_used%=IMG_ROWS;
   \   00000020   0x....             LDR.N    R0,??DataTable12_18
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x2140             MOVS     R1,#+64
   \   00000026   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000002A   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000002E   0x....             LDR.N    R1,??DataTable12_18
   \   00000030   0x7008             STRB     R0,[R1, #+0]
    154          }
   \   00000032   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 1
   \                     `Cam_Algorithm::img_row_used`:
   \   00000000                      DS8 1
    155          
    156          // ====== Basic Drivers ======
    157          

   \                                 In section .text, align 2, keep-with-next
    158          void PORTC_IRQHandler(){
    159            if((PORTC->ISFR)&PORT_ISFR_ISF(1 << 8)){  //CS
   \                     PORTC_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12_19  ;; 0x4004b0a0
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x05C0             LSLS     R0,R0,#+23
   \   00000006   0xD533             BPL.N    ??PORTC_IRQHandler_0
    160              PORTC->ISFR |= PORT_ISFR_ISF(1 << 8);
   \   00000008   0x....             LDR.N    R0,??DataTable12_19  ;; 0x4004b0a0
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000010   0x....             LDR.N    R1,??DataTable12_19  ;; 0x4004b0a0
   \   00000012   0x6008             STR      R0,[R1, #+0]
    161              
    162              if(img_row < IMG_ROWS && cam_row % IMG_STEP == 0 ){
   \   00000014   0x....             LDR.N    R0,??DataTable12_17
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2840             CMP      R0,#+64
   \   0000001A   0xDA23             BGE.N    ??PORTC_IRQHandler_1
   \   0000001C   0x....             LDR.N    R0,??DataTable12_20
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2102             MOVS     R1,#+2
   \   00000022   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000026   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD11A             BNE.N    ??PORTC_IRQHandler_1
    163                DMA0->TCD[0].DADDR = (u32)&cam_buffer[img_row][0];
   \   0000002E   0x....             LDR.N    R1,??DataTable12_15
   \   00000030   0x....             LDR.N    R0,??DataTable12_17
   \   00000032   0x7802             LDRB     R2,[R0, #+0]
   \   00000034   0x2080             MOVS     R0,#+128
   \   00000036   0x4342             MULS     R2,R0,R2
   \   00000038   0xEB01 0x0002      ADD      R0,R1,R2
   \   0000003C   0x....             LDR.N    R1,??DataTable12_21  ;; 0x40009010
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    164                DMA0->ERQ |= DMA_ERQ_ERQ0_MASK; //Enable DMA0
   \   00000040   0x....             LDR.N    R0,??DataTable12_22  ;; 0x4000800c
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000048   0x....             LDR.N    R1,??DataTable12_22  ;; 0x4000800c
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    165                ADC0->SC1[0] |= ADC_SC1_ADCH(4); //Restart ADC
   \   0000004C   0x....             LDR.N    R0,??DataTable12_23  ;; 0x4003b000
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000054   0x....             LDR.N    R1,??DataTable12_23  ;; 0x4003b000
   \   00000056   0x6008             STR      R0,[R1, #+0]
    166                DMA0->TCD[0].CSR |= DMA_CSR_START_MASK; //Start
   \   00000058   0x....             LDR.N    R0,??DataTable12_24  ;; 0x4000901c
   \   0000005A   0x8800             LDRH     R0,[R0, #+0]
   \   0000005C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000060   0x....             LDR.N    R1,??DataTable12_24  ;; 0x4000901c
   \   00000062   0x8008             STRH     R0,[R1, #+0]
    167          	}
    168          	cam_row++;
   \                     ??PORTC_IRQHandler_1: (+1)
   \   00000064   0x....             LDR.N    R0,??DataTable12_20
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \   0000006A   0x....             LDR.N    R1,??DataTable12_20
   \   0000006C   0x7008             STRB     R0,[R1, #+0]
   \   0000006E   0xE010             B.N      ??PORTC_IRQHandler_2
    169            }
    170            else if(PORTC->ISFR&PORT_ISFR_ISF(1 << 9)){   //VS
   \                     ??PORTC_IRQHandler_0: (+1)
   \   00000070   0x....             LDR.N    R0,??DataTable12_19  ;; 0x4004b0a0
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x0580             LSLS     R0,R0,#+22
   \   00000076   0xD50C             BPL.N    ??PORTC_IRQHandler_2
    171              PORTC->ISFR |= PORT_ISFR_ISF(1 << 9);
   \   00000078   0x....             LDR.N    R0,??DataTable12_19  ;; 0x4004b0a0
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   00000080   0x....             LDR.N    R1,??DataTable12_19  ;; 0x4004b0a0
   \   00000082   0x6008             STR      R0,[R1, #+0]
    172              
    173              cam_row = img_row = 0;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x....             LDR.N    R1,??DataTable12_17
   \   00000088   0x7008             STRB     R0,[R1, #+0]
   \   0000008A   0x....             LDR.N    R0,??DataTable12_17
   \   0000008C   0x7800             LDRB     R0,[R0, #+0]
   \   0000008E   0x....             LDR.N    R1,??DataTable12_20
   \   00000090   0x7008             STRB     R0,[R1, #+0]
    174              
    175            }
    176          }
   \                     ??PORTC_IRQHandler_2: (+1)
   \   00000092   0x4770             BX       LR               ;; return
    177          

   \                                 In section .text, align 2, keep-with-next
    178          void DMA0_IRQHandler(){
    179            DMA0->CINT &= ~DMA_CINT_CINT(7); //Clear DMA0 Interrupt Flag
   \                     DMA0_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12_25  ;; 0x4000801f
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xF010 0x00F8      ANDS     R0,R0,#0xF8
   \   00000008   0x....             LDR.N    R1,??DataTable12_25  ;; 0x4000801f
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
    180            
    181            img_row++; 
   \   0000000C   0x....             LDR.N    R0,??DataTable12_17
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x1C40             ADDS     R0,R0,#+1
   \   00000012   0x....             LDR.N    R1,??DataTable12_17
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    182          }
   \   00000016   0x4770             BX       LR               ;; return
    183          

   \                                 In section .text, align 2, keep-with-next
    184          void Cam_Init(){
   \                     Cam_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    185            
    186            // --- IO ---
    187            
    188            PORTC->PCR[8] |= PORT_PCR_MUX(1); //cs
   \   00000002   0x....             LDR.N    R0,??DataTable12_26  ;; 0x4004b020
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000000A   0x....             LDR.N    R1,??DataTable12_26  ;; 0x4004b020
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    189            PORTC->PCR[9] |= PORT_PCR_MUX(1); //vs
   \   0000000E   0x....             LDR.N    R0,??DataTable12_27  ;; 0x4004b024
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000016   0x....             LDR.N    R1,??DataTable12_27  ;; 0x4004b024
   \   00000018   0x6008             STR      R0,[R1, #+0]
    190            PORTC->PCR[11] |= PORT_PCR_MUX(1);    //oe
   \   0000001A   0x....             LDR.N    R0,??DataTable12_28  ;; 0x4004b02c
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000022   0x....             LDR.N    R1,??DataTable12_28  ;; 0x4004b02c
   \   00000024   0x6008             STR      R0,[R1, #+0]
    191            PTC->PDDR &=~(3<<8);
   \   00000026   0x....             LDR.N    R0,??DataTable12_29  ;; 0x400ff094
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF430 0x7040      BICS     R0,R0,#0x300
   \   0000002E   0x....             LDR.N    R1,??DataTable12_29  ;; 0x400ff094
   \   00000030   0x6008             STR      R0,[R1, #+0]
    192            PTC->PDDR &=~(1<<11);
   \   00000032   0x....             LDR.N    R0,??DataTable12_29  ;; 0x400ff094
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF430 0x6000      BICS     R0,R0,#0x800
   \   0000003A   0x....             LDR.N    R1,??DataTable12_29  ;; 0x400ff094
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    193            PORTC->PCR[8] |= PORT_PCR_PE_MASK | PORT_PCR_PS_MASK | PORT_PCR_IRQC(10);	//PULLUP | falling edge
   \   0000003E   0x....             LDR.N    R0,??DataTable12_26  ;; 0x4004b020
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF440 0x2020      ORR      R0,R0,#0xA0000
   \   00000046   0xF050 0x0003      ORRS     R0,R0,#0x3
   \   0000004A   0x....             LDR.N    R1,??DataTable12_26  ;; 0x4004b020
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    194            PORTC->PCR[9] |= PORT_PCR_PE_MASK | PORT_PCR_PS_MASK | PORT_PCR_IRQC(9);  // rising edge
   \   0000004E   0x....             LDR.N    R0,??DataTable12_27  ;; 0x4004b024
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF440 0x2010      ORR      R0,R0,#0x90000
   \   00000056   0xF050 0x0003      ORRS     R0,R0,#0x3
   \   0000005A   0x....             LDR.N    R1,??DataTable12_27  ;; 0x4004b024
   \   0000005C   0x6008             STR      R0,[R1, #+0]
    195            PORTC->PCR[11] |= PORT_PCR_PE_MASK | PORT_PCR_PS_MASK ;
   \   0000005E   0x....             LDR.N    R0,??DataTable12_28  ;; 0x4004b02c
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF050 0x0003      ORRS     R0,R0,#0x3
   \   00000066   0x....             LDR.N    R1,??DataTable12_28  ;; 0x4004b02c
   \   00000068   0x6008             STR      R0,[R1, #+0]
    196            
    197            NVIC_EnableIRQ(PORTC_IRQn);
   \   0000006A   0x2059             MOVS     R0,#+89
   \   0000006C   0x.... 0x....      BL       __NVIC_EnableIRQ
    198            NVIC_SetPriority(PORTC_IRQn, NVIC_EncodePriority(NVIC_GROUP, 1, 2));
   \   00000070   0x2202             MOVS     R2,#+2
   \   00000072   0x2101             MOVS     R1,#+1
   \   00000074   0x2005             MOVS     R0,#+5
   \   00000076   0x.... 0x....      BL       NVIC_EncodePriority
   \   0000007A   0x0001             MOVS     R1,R0
   \   0000007C   0x2059             MOVS     R0,#+89
   \   0000007E   0x.... 0x....      BL       __NVIC_SetPriority
    199            
    200            // --- AD ---
    201            
    202            /*
    203            SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK;  //ADC1 Clock Enable
    204            ADC0->CFG1 |= 0
    205                       //|ADC_CFG1_ADLPC_MASK
    206                       | ADC_CFG1_ADICLK(1)
    207                       | ADC_CFG1_MODE(0);     // 8 bits
    208                       //| ADC_CFG1_ADIV(0);
    209            ADC0->CFG2 |= //ADC_CFG2_ADHSC_MASK |
    210                          ADC_CFG2_MUXSEL_MASK |  // b
    211                          ADC_CFG2_ADACKEN_MASK; 
    212            
    213            ADC0->SC1[0]&=~ADC_SC1_AIEN_MASK;//disenble interrupt
    214            
    215            ADC0->SC2 |= ADC_SC2_DMAEN_MASK; //DMA
    216            
    217            ADC0->SC3 |= ADC_SC3_ADCO_MASK; // continuous
    218            
    219            //PORTC->PCR[2]|=PORT_PCR_MUX(0);//adc1-4a
    220            
    221            ADC0->SC1[0] |= ADC_SC1_ADCH(4);
    222            */
    223            
    224            SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK; //ADC1 Clock Enable
   \   00000082   0x....             LDR.N    R0,??DataTable12_30  ;; 0x4004803c
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   0000008A   0x....             LDR.N    R1,??DataTable12_30  ;; 0x4004803c
   \   0000008C   0x6008             STR      R0,[R1, #+0]
    225            ADC0->SC1[0] &= ~ADC_SC1_AIEN_MASK; //ADC1A
   \   0000008E   0x....             LDR.N    R0,??DataTable12_23  ;; 0x4003b000
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0xF030 0x0040      BICS     R0,R0,#0x40
   \   00000096   0x....             LDR.N    R1,??DataTable12_23  ;; 0x4003b000
   \   00000098   0x6008             STR      R0,[R1, #+0]
    226            ADC0->SC1[0] = 0x00000000; //Clear
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0x....             LDR.N    R1,??DataTable12_23  ;; 0x4003b000
   \   0000009E   0x6008             STR      R0,[R1, #+0]
    227            ADC0->SC1[0] |= ADC_SC1_ADCH(4); //ADC1_5->Input, Single Pin, No interrupt
   \   000000A0   0x....             LDR.N    R0,??DataTable12_23  ;; 0x4003b000
   \   000000A2   0x6800             LDR      R0,[R0, #+0]
   \   000000A4   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000A8   0x....             LDR.N    R1,??DataTable12_23  ;; 0x4003b000
   \   000000AA   0x6008             STR      R0,[R1, #+0]
    228            ADC0->SC1[1] &= ~ADC_SC1_AIEN_MASK; //ADC1B
   \   000000AC   0x....             LDR.N    R0,??DataTable12_31  ;; 0x4003b004
   \   000000AE   0x6800             LDR      R0,[R0, #+0]
   \   000000B0   0xF030 0x0040      BICS     R0,R0,#0x40
   \   000000B4   0x....             LDR.N    R1,??DataTable12_31  ;; 0x4003b004
   \   000000B6   0x6008             STR      R0,[R1, #+0]
    229            ADC0->SC1[1] |= ADC_SC1_ADCH(4); //ADC1_5b
   \   000000B8   0x....             LDR.N    R0,??DataTable12_31  ;; 0x4003b004
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000C0   0x....             LDR.N    R1,??DataTable12_31  ;; 0x4003b004
   \   000000C2   0x6008             STR      R0,[R1, #+0]
    230            ADC0->SC2 &= 0x00000000; //Clear all.
   \   000000C4   0x....             LDR.N    R0,??DataTable12_32  ;; 0x4003b020
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x....             LDR.N    R1,??DataTable12_32  ;; 0x4003b020
   \   000000CC   0x6008             STR      R0,[R1, #+0]
    231            ADC0->SC2 |= ADC_SC2_DMAEN_MASK; //DMA, SoftWare
   \   000000CE   0x....             LDR.N    R0,??DataTable12_32  ;; 0x4003b020
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000D6   0x....             LDR.N    R1,??DataTable12_32  ;; 0x4003b020
   \   000000D8   0x6008             STR      R0,[R1, #+0]
    232            ADC0->SC3 &= (~ADC_SC3_AVGE_MASK&~ADC_SC3_AVGS_MASK); //hardware average disabled
   \   000000DA   0x....             LDR.N    R0,??DataTable12_33  ;; 0x4003b024
   \   000000DC   0x6800             LDR      R0,[R0, #+0]
   \   000000DE   0x08C0             LSRS     R0,R0,#+3
   \   000000E0   0x00C0             LSLS     R0,R0,#+3
   \   000000E2   0x....             LDR.N    R1,??DataTable12_33  ;; 0x4003b024
   \   000000E4   0x6008             STR      R0,[R1, #+0]
    233            ADC0->SC3 |= ADC_SC3_ADCO_MASK; //Continuous conversion enable
   \   000000E6   0x....             LDR.N    R0,??DataTable12_33  ;; 0x4003b024
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000EE   0x....             LDR.N    R1,??DataTable12_33  ;; 0x4003b024
   \   000000F0   0x6008             STR      R0,[R1, #+0]
    234            ADC0->CFG1|=ADC_CFG1_ADICLK(1)|ADC_CFG1_MODE(0)|ADC_CFG1_ADIV(0);//InputClk, ShortTime, 8bits, Bus
   \   000000F2   0x....             LDR.N    R0,??DataTable12_34  ;; 0x4003b008
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000FA   0x....             LDR.N    R1,??DataTable12_34  ;; 0x4003b008
   \   000000FC   0x6008             STR      R0,[R1, #+0]
    235            ADC0->CFG2 |= ADC_CFG2_MUXSEL_MASK; //ADC1  b
   \   000000FE   0x....             LDR.N    R0,??DataTable12_35  ;; 0x4003b00c
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000106   0x....             LDR.N    R1,??DataTable12_35  ;; 0x4003b00c
   \   00000108   0x6008             STR      R0,[R1, #+0]
    236            ADC0->CFG2 |= ADC_CFG2_ADACKEN_MASK; //OutputClock
   \   0000010A   0x....             LDR.N    R0,??DataTable12_35  ;; 0x4003b00c
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000112   0x....             LDR.N    R1,??DataTable12_35  ;; 0x4003b00c
   \   00000114   0x6008             STR      R0,[R1, #+0]
    237              
    238            // --- DMA ---
    239            
    240            SIM->SCGC6 |= SIM_SCGC6_DMAMUX_MASK; //DMAMUX Clock Enable
   \   00000116   0x....             LDR.N    R0,??DataTable12_30  ;; 0x4004803c
   \   00000118   0x6800             LDR      R0,[R0, #+0]
   \   0000011A   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000011E   0x....             LDR.N    R1,??DataTable12_30  ;; 0x4004803c
   \   00000120   0x6008             STR      R0,[R1, #+0]
    241            SIM->SCGC7 |= SIM_SCGC7_DMA_MASK; //DMA Clock Enable
   \   00000122   0x....             LDR.N    R0,??DataTable12_36  ;; 0x40048040
   \   00000124   0x6800             LDR      R0,[R0, #+0]
   \   00000126   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000012A   0x....             LDR.N    R1,??DataTable12_36  ;; 0x40048040
   \   0000012C   0x6008             STR      R0,[R1, #+0]
    242            DMAMUX->CHCFG[0] |= DMAMUX_CHCFG_SOURCE(40); //DMA0->No.40 request, ADC0
   \   0000012E   0x....             LDR.N    R0,??DataTable12_37  ;; 0x40021000
   \   00000130   0x7800             LDRB     R0,[R0, #+0]
   \   00000132   0xF050 0x0028      ORRS     R0,R0,#0x28
   \   00000136   0x....             LDR.N    R1,??DataTable12_37  ;; 0x40021000
   \   00000138   0x7008             STRB     R0,[R1, #+0]
    243            DMA0->TCD[0].SADDR = (uint32_t) & (ADC0->R[0]); //Source Address 0x400B_B010h
   \   0000013A   0x....             LDR.N    R0,??DataTable12_38  ;; 0x4003b010
   \   0000013C   0x....             LDR.N    R1,??DataTable12_39  ;; 0x40009000
   \   0000013E   0x6008             STR      R0,[R1, #+0]
    244            DMA0->TCD[0].SOFF = 0; //Source Fixed
   \   00000140   0x2000             MOVS     R0,#+0
   \   00000142   0x....             LDR.N    R1,??DataTable12_40  ;; 0x40009004
   \   00000144   0x8008             STRH     R0,[R1, #+0]
    245            DMA0->TCD[0].ATTR = DMA_ATTR_SSIZE(0) | DMA_ATTR_DSIZE(0); //Source 8 bits, Aim 8 bits
   \   00000146   0x2000             MOVS     R0,#+0
   \   00000148   0x....             LDR.N    R1,??DataTable12_41  ;; 0x40009006
   \   0000014A   0x8008             STRH     R0,[R1, #+0]
    246            DMA0->TCD[0].NBYTES_MLNO = DMA_NBYTES_MLNO_NBYTES(1); //one byte each
   \   0000014C   0x2001             MOVS     R0,#+1
   \   0000014E   0x....             LDR.N    R1,??DataTable12_42  ;; 0x40009008
   \   00000150   0x6008             STR      R0,[R1, #+0]
    247            DMA0->TCD[0].SLAST = 0; //Last Source fixed
   \   00000152   0x2000             MOVS     R0,#+0
   \   00000154   0x....             LDR.N    R1,??DataTable12_43  ;; 0x4000900c
   \   00000156   0x6008             STR      R0,[R1, #+0]
    248            DMA0->TCD[0].DADDR = (u32)cam_buffer;
   \   00000158   0x....             LDR.N    R0,??DataTable12_15
   \   0000015A   0x....             LDR.N    R1,??DataTable12_21  ;; 0x40009010
   \   0000015C   0x6008             STR      R0,[R1, #+0]
    249            DMA0->TCD[0].DOFF = 1;
   \   0000015E   0x2001             MOVS     R0,#+1
   \   00000160   0x....             LDR.N    R1,??DataTable12_44  ;; 0x40009014
   \   00000162   0x8008             STRH     R0,[R1, #+0]
    250            DMA0->TCD[0].CITER_ELINKNO = DMA_CITER_ELINKNO_CITER(IMG_COLS);
   \   00000164   0x2080             MOVS     R0,#+128
   \   00000166   0x....             LDR.N    R1,??DataTable12_45  ;; 0x40009016
   \   00000168   0x8008             STRH     R0,[R1, #+0]
    251            DMA0->TCD[0].DLAST_SGA = 0;
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0x....             LDR.N    R1,??DataTable12_46  ;; 0x40009018
   \   0000016E   0x6008             STR      R0,[R1, #+0]
    252            DMA0->TCD[0].BITER_ELINKNO = DMA_BITER_ELINKNO_BITER(IMG_COLS);
   \   00000170   0x2080             MOVS     R0,#+128
   \   00000172   0x....             LDR.N    R1,??DataTable12_47  ;; 0x4000901e
   \   00000174   0x8008             STRH     R0,[R1, #+0]
    253            DMA0->TCD[0].CSR = 0x00000000; //Clear
   \   00000176   0x2000             MOVS     R0,#+0
   \   00000178   0x....             LDR.N    R1,??DataTable12_24  ;; 0x4000901c
   \   0000017A   0x8008             STRH     R0,[R1, #+0]
    254            DMA0->TCD[0].CSR |= DMA_CSR_DREQ_MASK; //Auto Clear
   \   0000017C   0x....             LDR.N    R0,??DataTable12_24  ;; 0x4000901c
   \   0000017E   0x8800             LDRH     R0,[R0, #+0]
   \   00000180   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000184   0x....             LDR.N    R1,??DataTable12_24  ;; 0x4000901c
   \   00000186   0x8008             STRH     R0,[R1, #+0]
    255            DMA0->TCD[0].CSR |= DMA_CSR_INTMAJOR_MASK; //Enable Major Loop Int
   \   00000188   0x....             LDR.N    R0,??DataTable12_24  ;; 0x4000901c
   \   0000018A   0x8800             LDRH     R0,[R0, #+0]
   \   0000018C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000190   0x....             LDR.N    R1,??DataTable12_24  ;; 0x4000901c
   \   00000192   0x8008             STRH     R0,[R1, #+0]
    256            DMA0->INT |= DMA_INT_INT0_MASK; //Open Interrupt
   \   00000194   0x....             LDR.N    R0,??DataTable12_48  ;; 0x40008024
   \   00000196   0x6800             LDR      R0,[R0, #+0]
   \   00000198   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000019C   0x....             LDR.N    R1,??DataTable12_48  ;; 0x40008024
   \   0000019E   0x6008             STR      R0,[R1, #+0]
    257            //DMA->ERQ&=~DMA_ERQ_ERQ0_MASK;//Clear Disable
    258            DMAMUX->CHCFG[0] |= DMAMUX_CHCFG_ENBL_MASK; //Enable
   \   000001A0   0x....             LDR.N    R0,??DataTable12_37  ;; 0x40021000
   \   000001A2   0x7800             LDRB     R0,[R0, #+0]
   \   000001A4   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000001A8   0x....             LDR.N    R1,??DataTable12_37  ;; 0x40021000
   \   000001AA   0x7008             STRB     R0,[R1, #+0]
    259            
    260            NVIC_EnableIRQ(DMA0_IRQn);
   \   000001AC   0x2000             MOVS     R0,#+0
   \   000001AE   0x.... 0x....      BL       __NVIC_EnableIRQ
    261            NVIC_SetPriority(DMA0_IRQn, NVIC_EncodePriority(NVIC_GROUP, 1, 2));
   \   000001B2   0x2202             MOVS     R2,#+2
   \   000001B4   0x2101             MOVS     R1,#+1
   \   000001B6   0x2005             MOVS     R0,#+5
   \   000001B8   0x.... 0x....      BL       NVIC_EncodePriority
   \   000001BC   0x0001             MOVS     R1,R0
   \   000001BE   0x2000             MOVS     R0,#+0
   \   000001C0   0x.... 0x....      BL       __NVIC_SetPriority
    262            
    263          }
   \   000001C4   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     WID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     road

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0xE000ED18         DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     mid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x........         DC32     last_e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x9999999A         DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x3FE99999         DC32     0x3fe99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x3FC99999         DC32     0x3fc99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x........         DC32     kp_dir

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x........         DC32     kd_dir

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x........         DC32     dir

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x40180000         DC32     0x40180000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x40100000         DC32     0x40100000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0x........         DC32     motor_x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0x3FD33333         DC32     0x3fd33333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \   00000000   0x........         DC32     cam_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \   00000000   0x........         DC32     thr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \   00000000   0x........         DC32     img_row

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \   00000000   0x........         DC32     `Cam_Algorithm::img_row_used`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_19:
   \   00000000   0x4004B0A0         DC32     0x4004b0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_20:
   \   00000000   0x........         DC32     cam_row

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_21:
   \   00000000   0x40009010         DC32     0x40009010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_22:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_23:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_24:
   \   00000000   0x4000901C         DC32     0x4000901c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_25:
   \   00000000   0x4000801F         DC32     0x4000801f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_26:
   \   00000000   0x4004B020         DC32     0x4004b020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_27:
   \   00000000   0x4004B024         DC32     0x4004b024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_28:
   \   00000000   0x4004B02C         DC32     0x4004b02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_29:
   \   00000000   0x400FF094         DC32     0x400ff094

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_30:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_31:
   \   00000000   0x4003B004         DC32     0x4003b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_32:
   \   00000000   0x4003B020         DC32     0x4003b020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_33:
   \   00000000   0x4003B024         DC32     0x4003b024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_34:
   \   00000000   0x4003B008         DC32     0x4003b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_35:
   \   00000000   0x4003B00C         DC32     0x4003b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_36:
   \   00000000   0x40048040         DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_37:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_38:
   \   00000000   0x4003B010         DC32     0x4003b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_39:
   \   00000000   0x40009000         DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_40:
   \   00000000   0x40009004         DC32     0x40009004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_41:
   \   00000000   0x40009006         DC32     0x40009006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_42:
   \   00000000   0x40009008         DC32     0x40009008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_43:
   \   00000000   0x4000900C         DC32     0x4000900c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_44:
   \   00000000   0x40009014         DC32     0x40009014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_45:
   \   00000000   0x40009016         DC32     0x40009016

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_46:
   \   00000000   0x40009018         DC32     0x40009018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_47:
   \   00000000   0x4000901E         DC32     0x4000901e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_48:
   \   00000000   0x40008024         DC32     0x40008024

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Cam_2_line
        16   -> __aeabi_d2iz
        16   -> __aeabi_dadd
        16   -> __aeabi_dmul
        16   -> __aeabi_i2d
       0   Cam_Algorithm
      16   Cam_Con_2_line
        16   -> Servo_Output
        16   -> __aeabi_d2iz
        16   -> __aeabi_dadd
        16   -> __aeabi_dmul
        16   -> __aeabi_i2d
      40   Cam_Con_k
        40   -> Servo_Output
        40   -> __aeabi_d2iz
        40   -> __aeabi_dadd
        40   -> __aeabi_ddiv
        40   -> __aeabi_dmul
        40   -> __aeabi_i2d
       0   Cam_Cont_Init
       8   Cam_Init
         8   -> NVIC_EncodePriority
         8   -> __NVIC_EnableIRQ
         8   -> __NVIC_SetPriority
      40   Cam_k
        40   -> __aeabi_d2iz
        40   -> __aeabi_dadd
        40   -> __aeabi_ddiv
        40   -> __aeabi_dmul
        40   -> __aeabi_i2d
       0   DMA0_IRQHandler
       4   NVIC_EncodePriority
       0   PORTC_IRQHandler
      32   Speed_k
        32   -> __aeabi_i2d
        32 __aeabi_cdcmple
        32 __aeabi_cdrcmple
       0   __NVIC_EnableIRQ
       0   __NVIC_SetPriority
       0   road_value


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_26
       4  ??DataTable12_27
       4  ??DataTable12_28
       4  ??DataTable12_29
       4  ??DataTable12_3
       4  ??DataTable12_30
       4  ??DataTable12_31
       4  ??DataTable12_32
       4  ??DataTable12_33
       4  ??DataTable12_34
       4  ??DataTable12_35
       4  ??DataTable12_36
       4  ??DataTable12_37
       4  ??DataTable12_38
       4  ??DataTable12_39
       4  ??DataTable12_4
       4  ??DataTable12_40
       4  ??DataTable12_41
       4  ??DataTable12_42
       4  ??DataTable12_43
       4  ??DataTable12_44
       4  ??DataTable12_45
       4  ??DataTable12_46
       4  ??DataTable12_47
       4  ??DataTable12_48
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
     164  Cam_2_line
      52  Cam_Algorithm
     170  Cam_Con_2_line
     380  Cam_Con_k
     116  Cam_Cont_Init
     454  Cam_Init
     374  Cam_k
      24  DMA0_IRQHandler
      62  NVIC_EncodePriority
     148  PORTC_IRQHandler
     542  Speed_k
       1  WID
      28  __NVIC_EnableIRQ
      38  __NVIC_SetPriority
    8192  cam_buffer
       1  cam_row
       4  dir
       4  e
       1  img_row
       1  img_row_used
       1  kd_dir
       1  kp_dir
       4  last_e
       1  left_white
       2  mid
       1  right_white
     600  road
     272  road_value
       4  thr

 
 8 811 bytes in section .bss
     7 bytes in section .data
 3 032 bytes in section .text
 
 3 032 bytes of CODE memory
 8 818 bytes of DATA memory

Errors: none
Warnings: 5
