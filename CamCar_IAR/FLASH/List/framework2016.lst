###############################################################################
#
# IAR ANSI C/C++ Compiler V8.20.1.14183/W32 for ARM       09/Jul/2019  18:03:26
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\IARworkspace\CamCar_IAR\source\framework2016.c
#    Command line =  
#        -f C:\Users\57416\AppData\Local\Temp\EWA29A.tmp
#        (E:\IARworkspace\CamCar_IAR\source\framework2016.c -lCN
#        E:\IARworkspace\CamCar_IAR\FLASH\List -lB
#        E:\IARworkspace\CamCar_IAR\FLASH\List -o
#        E:\IARworkspace\CamCar_IAR\FLASH\Obj --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --char_is_signed --fpu=None
#        --dlib_config "D:\Program
#        Files(x86)\IAR\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\IARworkspace\CamCar_IAR\source\ -I
#        E:\IARworkspace\CamCar_IAR\common\ -I E:\IARworkspace\CamCar_IAR\LPLD\
#        -I E:\IARworkspace\CamCar_IAR\LPLD\HW\ -I
#        E:\IARworkspace\CamCar_IAR\LPLD\DEV\ -Ol -I "D:\Program
#        Files(x86)\IAR\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  E:\IARworkspace\CamCar_IAR\FLASH\List\framework2016.lst
#    Object file  =  E:\IARworkspace\CamCar_IAR\FLASH\Obj\framework2016.o
#
###############################################################################

E:\IARworkspace\CamCar_IAR\source\framework2016.c
      1          /*
      2          Arthor : Qian Qiyang (KisaragiAyanoo@twitter)
      3          Date : 2015/12/01
      4          License : MIT
      5          */
      6          
      7          
      8          #include "includes.h"
      9          
     10          

   \                                 In section .bss, align 1
     11          U8 ADC0_enabled = 0;
   \                     ADC0_enabled:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     12          U8 ADC1_enabled = 0;
   \                     ADC1_enabled:
   \   00000000                      DS8 1
     13          

   \                                 In section .bss, align 2
     14          s16 err_motorL = 0, last_err_motorL = 0, motor_outL = 0, motor_outR = 0, err_motorR = 0, last_err_motorR = 0;
   \                     err_motorL:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     last_err_motorL:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     motor_outL:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     motor_outR:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     err_motorR:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     last_err_motorR:
   \   00000000                      DS8 2

   \                                 In section .data, align 4
     15          int motor_xL = 100, motor_xR = 100;
   \                     motor_xL:
   \   00000000   0x00000064         DC32 100

   \                                 In section .data, align 4
   \                     motor_xR:
   \   00000000   0x00000064         DC32 100
     16          

   \                                 In section .text, align 2, keep-with-next
     17          void main (void)
     18          {
   \                     main: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     19            
     20            // --- System Initiate ---
     21            
     22            __disable_irq();
   \   00000002   0xB672             CPSID    I
     23            
     24            HMI_Init();
   \   00000004   0x.... 0x....      BL       HMI_Init
     25            PIT0_Init(PIT0_PERIOD_US);
   \   00000008   0xF640 0x10C4      MOVW     R0,#+2500
   \   0000000C   0x.... 0x....      BL       PIT0_Init
     26            PIT1_Init(PIT1_PERIOD_US);
   \   00000010   0xF644 0x6020      MOVW     R0,#+20000
   \   00000014   0x.... 0x....      BL       PIT1_Init
     27            PIT2_Init();
   \   00000018   0x.... 0x....      BL       PIT2_Init
     28            
     29            Flash_Init();
   \   0000001C   0x.... 0x....      BL       Flash_Init
     30            
     31            UART_Init(115200);
   \   00000020   0xF45F 0x30E1      MOVS     R0,#+115200
   \   00000024   0x.... 0x....      BL       UART_Init
     32            
     33            Motor_Init();
   \   00000028   0x.... 0x....      BL       Motor_Init
     34            Tacho_Init();
   \   0000002C   0x.... 0x....      BL       Tacho_Init
     35            Servo_Init();
   \   00000030   0x.... 0x....      BL       Servo_Init
     36            Oled_Init();
   \   00000034   0x.... 0x....      BL       Oled_Init
     37            
     38          #if (CAR_TYPE==0)   // Magnet and Balance
     39            
     40            Mag_Init();
   \   00000038   0x.... 0x....      BL       Mag_Init
     41            LPLD_MMA8451_Init();
   \   0000003C   0x.... 0x....      BL       LPLD_MMA8451_Init
     42            Gyro_Init();
   \   00000040   0x.... 0x....      BL       Gyro_Init
     43            
     44          #elif (CAR_TYPE==1)     // Only Camera
     45            
     46            Cam_Init();
     47            Cam_Cont_Init();
     48            LPLD_MMA8451_Init();
     49            
     50          #else               // Camera
     51            Mag_Init();
     52            LPLD_MMA8451_Init();
     53            Cam_Init();
     54            Cam_Cont_Init();
     55            
     56          #endif
     57            
     58            //-- Press Key 1 to Continue --
     59            Oled_Putstr(6,1,"Press Key1 to go on");
   \   00000044   0x....             LDR.N    R2,??DataTable4
   \   00000046   0x2101             MOVS     R1,#+1
   \   00000048   0x2006             MOVS     R0,#+6
   \   0000004A   0x.... 0x....      BL       Oled_Putstr
     60            //while (Key1());
     61            Oled_Clear();
   \   0000004E   0x.... 0x....      BL       Oled_Clear
     62            
     63            
     64            ////// System Initiated ////
     65            
     66            
     67            // --- Flash test --- 
     68            // To use this test, turn off Switch 1 first
     69            __disable_irq();
   \   00000052   0xB672             CPSID    I
     70            Oled_Putstr(0,0,"data[1] in flash is:");
   \   00000054   0x....             LDR.N    R2,??DataTable4_1
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      BL       Oled_Putstr
     71            Oled_Putstr(2,0,"data[1] in flash is:");
   \   0000005E   0x....             LDR.N    R2,??DataTable4_1
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x2002             MOVS     R0,#+2
   \   00000064   0x.... 0x....      BL       Oled_Putstr
     72            Oled_Putnum(1,11,Flash_Read(0,1));
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      BL       Flash_Read
   \   00000070   0x0002             MOVS     R2,R0
   \   00000072   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000074   0x210B             MOVS     R1,#+11
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0x.... 0x....      BL       Oled_Putnum
     73            data[1] = Flash_Read(0,1)+1;
   \   0000007C   0x2101             MOVS     R1,#+1
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x.... 0x....      BL       Flash_Read
   \   00000084   0x1C40             ADDS     R0,R0,#+1
   \   00000086   0x....             LDR.N    R1,??DataTable4_2
   \   00000088   0x8048             STRH     R0,[R1, #+2]
     74            Flash_Write(0);
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x.... 0x....      BL       Flash_Write
     75            __disable_irq();
   \   00000090   0xB672             CPSID    I
     76            Oled_Putnum(3,11,Flash_Read(0,1));
   \   00000092   0x2101             MOVS     R1,#+1
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0x.... 0x....      BL       Flash_Read
   \   0000009A   0x0002             MOVS     R2,R0
   \   0000009C   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   0000009E   0x210B             MOVS     R1,#+11
   \   000000A0   0x2003             MOVS     R0,#+3
   \   000000A2   0x.... 0x....      BL       Oled_Putnum
     77            //-- Press Key 1 to Continue --
     78            Oled_Putstr(6,1,"Key1 LiFe is best");
   \   000000A6   0x....             LDR.N    R2,??DataTable4_3
   \   000000A8   0x2101             MOVS     R1,#+1
   \   000000AA   0x2006             MOVS     R0,#+6
   \   000000AC   0x.... 0x....      BL       Oled_Putstr
     79            while (Key1());
   \                     ??main_0: (+1)
   \   000000B0   0x....             LDR.N    R0,??DataTable4_4  ;; 0x400ff010
   \   000000B2   0x6800             LDR      R0,[R0, #+0]
   \   000000B4   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD1F9             BNE.N    ??main_0
     80            Oled_Clear();
   \   000000BC   0x.... 0x....      BL       Oled_Clear
     81            ///// Flash test End///
     82           
     83            
     84            __enable_irq(); 
   \   000000C0   0xB662             CPSIE    I
     85            
     86            while(1)
     87            {
     88              //BELL(1);
     89              // Don't use oled or sensors' functions here !!!
     90             
     91          #if (CAR_TYPE==0)
     92              
     93            Servo_Output(-Mag_Control());    // this might be blocked , so put here instead of interrupt
   \                     ??main_1: (+1)
   \   000000C2   0x.... 0x....      BL       Mag_Control
   \   000000C6   0x4240             RSBS     R0,R0,#+0
   \   000000C8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000CA   0x.... 0x....      BL       Servo_Output
     94            err_motorL = motor_xL - tacho0 * 15;
   \   000000CE   0x....             LDR.N    R0,??DataTable4_5
   \   000000D0   0x6801             LDR      R1,[R0, #+0]
   \   000000D2   0x....             LDR.N    R0,??DataTable4_6
   \   000000D4   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000000D8   0x220F             MOVS     R2,#+15
   \   000000DA   0xFB10 0xF002      SMULBB   R0,R0,R2
   \   000000DE   0x1A09             SUBS     R1,R1,R0
   \   000000E0   0x....             LDR.N    R0,??DataTable4_7
   \   000000E2   0x8001             STRH     R1,[R0, #+0]
     95            err_motorR = motor_xR + tacho1 * 15;
   \   000000E4   0x....             LDR.N    R0,??DataTable4_8
   \   000000E6   0x6800             LDR      R0,[R0, #+0]
   \   000000E8   0x....             LDR.N    R1,??DataTable4_9
   \   000000EA   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000EE   0x220F             MOVS     R2,#+15
   \   000000F0   0xFB11 0x0002      SMLABB   R0,R1,R2,R0
   \   000000F4   0x....             LDR.N    R1,??DataTable4_10
   \   000000F6   0x8008             STRH     R0,[R1, #+0]
     96            
     97            
     98            motor_outL += (int)(0.4 * (err_motorL - last_err_motorL) + 0.01 * err_motorL); 
   \   000000F8   0x....             LDR.N    R0,??DataTable4_11
   \   000000FA   0x8806             LDRH     R6,[R0, #+0]
   \   000000FC   0x....             LDR.N    R0,??DataTable4_7
   \   000000FE   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000102   0x....             LDR.N    R1,??DataTable4_12
   \   00000104   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000108   0x1A40             SUBS     R0,R0,R1
   \   0000010A   0x.... 0x....      BL       __aeabi_i2d
   \   0000010E   0x....             LDR.N    R2,??DataTable4_13  ;; 0x9999999a
   \   00000110   0x....             LDR.N    R3,??DataTable4_14  ;; 0x3fd99999
   \   00000112   0x.... 0x....      BL       __aeabi_dmul
   \   00000116   0x0004             MOVS     R4,R0
   \   00000118   0x000D             MOVS     R5,R1
   \   0000011A   0x....             LDR.N    R0,??DataTable4_7
   \   0000011C   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000120   0x.... 0x....      BL       __aeabi_i2d
   \   00000124   0x....             LDR.N    R2,??DataTable4_15  ;; 0x47ae147b
   \   00000126   0x....             LDR.N    R3,??DataTable4_16  ;; 0x3f847ae1
   \   00000128   0x.... 0x....      BL       __aeabi_dmul
   \   0000012C   0x0022             MOVS     R2,R4
   \   0000012E   0x002B             MOVS     R3,R5
   \   00000130   0x.... 0x....      BL       __aeabi_dadd
   \   00000134   0x.... 0x....      BL       __aeabi_d2iz
   \   00000138   0x1986             ADDS     R6,R0,R6
   \   0000013A   0x....             LDR.N    R0,??DataTable4_11
   \   0000013C   0x8006             STRH     R6,[R0, #+0]
     99            motor_outR += (int)(0.4 * (err_motorR - last_err_motorR) + 0.01 * err_motorR); 
   \   0000013E   0x....             LDR.N    R0,??DataTable4_17
   \   00000140   0x8806             LDRH     R6,[R0, #+0]
   \   00000142   0x....             LDR.N    R0,??DataTable4_10
   \   00000144   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000148   0x....             LDR.N    R1,??DataTable4_18
   \   0000014A   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000014E   0x1A40             SUBS     R0,R0,R1
   \   00000150   0x.... 0x....      BL       __aeabi_i2d
   \   00000154   0x....             LDR.N    R2,??DataTable4_13  ;; 0x9999999a
   \   00000156   0x....             LDR.N    R3,??DataTable4_14  ;; 0x3fd99999
   \   00000158   0x.... 0x....      BL       __aeabi_dmul
   \   0000015C   0x0004             MOVS     R4,R0
   \   0000015E   0x000D             MOVS     R5,R1
   \   00000160   0x....             LDR.N    R0,??DataTable4_10
   \   00000162   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000166   0x.... 0x....      BL       __aeabi_i2d
   \   0000016A   0x....             LDR.N    R2,??DataTable4_15  ;; 0x47ae147b
   \   0000016C   0x....             LDR.N    R3,??DataTable4_16  ;; 0x3f847ae1
   \   0000016E   0x.... 0x....      BL       __aeabi_dmul
   \   00000172   0x0022             MOVS     R2,R4
   \   00000174   0x002B             MOVS     R3,R5
   \   00000176   0x.... 0x....      BL       __aeabi_dadd
   \   0000017A   0x.... 0x....      BL       __aeabi_d2iz
   \   0000017E   0x1986             ADDS     R6,R0,R6
   \   00000180   0x....             LDR.N    R0,??DataTable4_17
   \   00000182   0x8006             STRH     R6,[R0, #+0]
    100            //motor_out = (int)(0.08 * err_motor + 0.01 * sum_err_motor);
    101            last_err_motorL = err_motorL;
   \   00000184   0x....             LDR.N    R0,??DataTable4_7
   \   00000186   0x8800             LDRH     R0,[R0, #+0]
   \   00000188   0x....             LDR.N    R1,??DataTable4_12
   \   0000018A   0x8008             STRH     R0,[R1, #+0]
    102            last_err_motorR = err_motorR;
   \   0000018C   0x....             LDR.N    R0,??DataTable4_10
   \   0000018E   0x8800             LDRH     R0,[R0, #+0]
   \   00000190   0x....             LDR.N    R1,??DataTable4_18
   \   00000192   0x8008             STRH     R0,[R1, #+0]
    103            
    104            MotorR_Output(0);
   \   00000194   0x2000             MOVS     R0,#+0
   \   00000196   0x.... 0x....      BL       MotorR_Output
    105            MotorL_Output(0);
   \   0000019A   0x2000             MOVS     R0,#+0
   \   0000019C   0x.... 0x....      BL       MotorL_Output
   \   000001A0   0xE78F             B.N      ??main_1
    106            //accy = Accy();
    107            //accz = Accz();
    108            
    109          #elif (CAR_TYPE==1)
    110            road_value();
    111            Cam_Con_2_line();
    112            //Cam_Con_k();
    113            err_motorL = motor_xL + tacho0 * 15;
    114            err_motorR = motor_xR + tacho1 * 15;
    115            
    116            
    117            motor_outL += (int)(0.4 * (err_motorL - last_err_motorL) + 0.01 * err_motorL); 
    118            motor_outR += (int)(0.4 * (err_motorR - last_err_motorR) + 0.01 * err_motorR); 
    119            //motor_out = (int)(0.08 * err_motor + 0.01 * sum_err_motor);
    120            last_err_motorL = err_motorL;
    121            last_err_motorR = err_motorR;
    122            
    123            MotorR_Output(motor_outR);
    124            MotorL_Output(motor_outL);
    125            //MotorL_Output(motor_out);
    126              
    127          #elif (CAR_TYPE==2)
    128            Mixed_Control();
    129            //Speed_k();
    130            err_motorL = motor_xL + tacho0 * 15;
    131            err_motorR = motor_xR + tacho1 * 15;
    132            
    133            
    134            motor_outL += (int)(0.4 * (err_motorL - last_err_motorL) + 0.01 * err_motorL); 
    135            motor_outR += (int)(0.4 * (err_motorR - last_err_motorR) + 0.01 * err_motorR); 
    136            //motor_out = (int)(0.08 * err_motor + 0.01 * sum_err_motor);
    137            last_err_motorL = err_motorL;
    138            last_err_motorR = err_motorR;
    139            
    140            MotorR_Output(motor_outR);
    141            MotorL_Output(motor_outL);
    142          #endif
    143              
    144              
    145              
    146            } 
    147          }
    148          
    149          
    150          
    151          
    152          
    153          
    154          // ===== System Interrupt Handler  ==== ( No Need to Edit )
    155          

   \                                 In section .text, align 2, keep-with-next
    156          void BusFault_Handler(){
   \                     BusFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    157            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
    158            Oled_Putstr(1,5,"Bus Fault");
   \   00000006   0x....             LDR.N    R2,??DataTable4_19
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
    159            Oled_Putstr(4,1,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_20
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
    160            while(Key1());
   \                     ??BusFault_Handler_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_4  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??BusFault_Handler_0
    161            
    162            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    163          }
    164          
    165          

   \                                 In section .text, align 2, keep-with-next
    166          void NMI_Handler(){
   \                     NMI_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    167            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
    168            Oled_Putstr(1,5,"NMI Fault");
   \   00000006   0x....             LDR.N    R2,??DataTable4_21
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
    169            Oled_Putstr(4,1,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_20
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
    170            while(Key1());
   \                     ??NMI_Handler_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_4  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??NMI_Handler_0
    171            
    172            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    173          }
    174          

   \                                 In section .text, align 2, keep-with-next
    175          void HardFault_Handler(void)
    176          {
   \                     HardFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    177            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
    178            Oled_Putstr(1,5,"Hard Fault");
   \   00000006   0x....             LDR.N    R2,??DataTable4_22
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
    179            Oled_Putstr(4,1,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_20
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
    180            while(Key1());
   \                     ??HardFault_Handler_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_4  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??HardFault_Handler_0
    181            
    182            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    183          }
    184          
    185          

   \                                 In section .text, align 2, keep-with-next
    186          void DefaultISR(void)
    187          {
   \                     DefaultISR: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    188            Oled_Clear();
   \   00000002   0x.... 0x....      BL       Oled_Clear
    189            Oled_Putstr(1,5,"Default ISR");
   \   00000006   0x....             LDR.N    R2,??DataTable4_23
   \   00000008   0x2105             MOVS     R1,#+5
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Oled_Putstr
    190            Oled_Putstr(4,2,"press Key1 to goon");
   \   00000010   0x....             LDR.N    R2,??DataTable4_20
   \   00000012   0x2102             MOVS     R1,#+2
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       Oled_Putstr
    191            while(Key1());
   \                     ??DefaultISR_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_4  ;; 0x400ff010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF3C0 0x2000      UBFX     R0,R0,#+8,#+1
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??DefaultISR_0
    192          
    193            return;
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    194          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     `data`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x400FF010         DC32     0x400ff010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     motor_xL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     tacho0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     err_motorL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     motor_xR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     tacho1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     err_motorR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     motor_outL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     last_err_motorL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x9999999A         DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x3FD99999         DC32     0x3fd99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x47AE147B         DC32     0x47ae147b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x3F847AE1         DC32     0x3f847ae1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     motor_outR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x........         DC32     last_err_motorR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x50 0x72          DC8 "Press Key1 to go on"
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x4B 0x65    
   \              0x79 0x31    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x67 0x6F    
   \              0x20 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x64 0x61          DC8 "data[1] in flash is:"
   \              0x74 0x61    
   \              0x5B 0x31    
   \              0x5D 0x20    
   \              0x69 0x6E    
   \              0x20 0x66    
   \              0x6C 0x61    
   \              0x73 0x68    
   \              0x20 0x69    
   \              0x73 0x3A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x4B 0x65          DC8 "Key1 LiFe is best"
   \              0x79 0x31    
   \              0x20 0x4C    
   \              0x69 0x46    
   \              0x65 0x20    
   \              0x69 0x73    
   \              0x20 0x62    
   \              0x65 0x73    
   \              0x74 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x42 0x75          DC8 "Bus Fault"
   \              0x73 0x20    
   \              0x46 0x61    
   \              0x75 0x6C    
   \              0x74 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x70 0x72          DC8 "press Key1 to goon"
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x4B 0x65    
   \              0x79 0x31    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x67 0x6F    
   \              0x6F 0x6E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x4E 0x4D          DC8 "NMI Fault"
   \              0x49 0x20    
   \              0x46 0x61    
   \              0x75 0x6C    
   \              0x74 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x48 0x61          DC8 "Hard Fault"
   \              0x72 0x64    
   \              0x20 0x46    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x44 0x65          DC8 "Default ISR"
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x20    
   \              0x49 0x53    
   \              0x52 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BusFault_Handler
         8   -> Oled_Clear
         8   -> Oled_Putstr
       8   DefaultISR
         8   -> Oled_Clear
         8   -> Oled_Putstr
       8   HardFault_Handler
         8   -> Oled_Clear
         8   -> Oled_Putstr
       8   NMI_Handler
         8   -> Oled_Clear
         8   -> Oled_Putstr
      16   main
        16   -> Flash_Init
        16   -> Flash_Read
        16   -> Flash_Write
        16   -> Gyro_Init
        16   -> HMI_Init
        16   -> LPLD_MMA8451_Init
        16   -> Mag_Control
        16   -> Mag_Init
        16   -> MotorL_Output
        16   -> MotorR_Output
        16   -> Motor_Init
        16   -> Oled_Clear
        16   -> Oled_Init
        16   -> Oled_Putnum
        16   -> Oled_Putstr
        16   -> PIT0_Init
        16   -> PIT1_Init
        16   -> PIT2_Init
        16   -> Servo_Init
        16   -> Servo_Output
        16   -> Tacho_Init
        16   -> UART_Init
        16   -> __aeabi_d2iz
        16   -> __aeabi_dadd
        16   -> __aeabi_dmul
        16   -> __aeabi_i2d


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      20  ?_0
      24  ?_1
      20  ?_2
      12  ?_3
      20  ?_4
      12  ?_5
      12  ?_6
      12  ?_7
       1  ADC0_enabled
       1  ADC1_enabled
      40  BusFault_Handler
      40  DefaultISR
      40  HardFault_Handler
      40  NMI_Handler
       2  err_motorL
       2  err_motorR
       2  last_err_motorL
       2  last_err_motorR
     418  main
       2  motor_outL
       2  motor_outR
       4  motor_xL
       4  motor_xR

 
  14 bytes in section .bss
   8 bytes in section .data
 132 bytes in section .rodata
 674 bytes in section .text
 
 674 bytes of CODE  memory
 132 bytes of CONST memory
  22 bytes of DATA  memory

Errors: none
Warnings: none
