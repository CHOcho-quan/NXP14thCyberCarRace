###############################################################################
#
# IAR ANSI C/C++ Compiler V8.20.1.14183/W32 for ARM       06/Jul/2019  22:02:02
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\IARworkspace\CamCar_IAR\source\OLED_UI.c
#    Command line =  
#        -f C:\Users\57416\AppData\Local\Temp\EWFE82.tmp
#        (E:\IARworkspace\CamCar_IAR\source\OLED_UI.c -lCN
#        E:\IARworkspace\CamCar_IAR\FLASH\List -lB
#        E:\IARworkspace\CamCar_IAR\FLASH\List -o
#        E:\IARworkspace\CamCar_IAR\FLASH\Obj --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --char_is_signed --fpu=None
#        --dlib_config "D:\Program
#        Files(x86)\IAR\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\IARworkspace\CamCar_IAR\source\ -I
#        E:\IARworkspace\CamCar_IAR\common\ -I E:\IARworkspace\CamCar_IAR\LPLD\
#        -I E:\IARworkspace\CamCar_IAR\LPLD\HW\ -I
#        E:\IARworkspace\CamCar_IAR\LPLD\DEV\ -Ol -I "D:\Program
#        Files(x86)\IAR\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  E:\IARworkspace\CamCar_IAR\FLASH\List\OLED_UI.lst
#    Object file  =  E:\IARworkspace\CamCar_IAR\FLASH\Obj\OLED_UI.o
#
###############################################################################

E:\IARworkspace\CamCar_IAR\source\OLED_UI.c
      1          
      2          #include "includes.h"
      3          extern int thr;
      4            /*
      5            UI_Page homepage;
      6            UI_Page subpage0;
      7            homepage.sub_type = (enum Item_Type *) malloc (4*2);
      8            homepage.sub_type[0] = Item_Type_Menu;
      9            homepage.sub = (void **)malloc (4*2); // (void **)(UI_Page **)
     10            *((UI_Page **)(homepage.sub)+0) = (UI_Page *) &subpage0;
     11            subpage0.parent = (void *) &homepage;
     12            
     13            subpage0.sub = (void **)123;
     14            Oled_Putnum(0,0,(s16)((*((UI_Page **)homepage.sub+0))->sub));
     15            */
     16            //free(homepage.sub);
     17            //free(homepage.sub_type);
     18          
     19          
     20          enum Item_Type{
     21              Item_Type_Menu,
     22              Item_Type_Para,
     23              Item_Type_Show,
     24              Item_Type_Func,
     25          };
     26          
     27          typedef struct {
     28            void * parent;   // UI_Page *
     29            enum Item_Type * sub_type; 
     30            void ** sub;  // UI_Page **
     31          }UI_Page;
     32          
     33          

   \                                 In section .text, align 2, keep-with-next
     34          void UI_SystemInfo(){
   \                     UI_SystemInfo: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     35            Oled_Putstr(0,0,"Car Type"); Oled_Putnum(0,11,CAR_TYPE);
   \   00000002   0x....             LDR.N    R2,??DataTable2
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       Oled_Putstr
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x210B             MOVS     R1,#+11
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       Oled_Putnum
     36            Oled_Putstr(1,0,"battery"); Oled_Putnum(1,11,battery);
   \   00000016   0x....             LDR.N    R2,??DataTable2_1
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      BL       Oled_Putstr
   \   00000020   0x....             LDR.N    R0,??DataTable2_2
   \   00000022   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000026   0x0002             MOVS     R2,R0
   \   00000028   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   0000002A   0x210B             MOVS     R1,#+11
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      BL       Oled_Putnum
     37            Oled_Putstr(3,0,"pit0 time"); Oled_Putnum(3,11,(s16)pit0_time);
   \   00000032   0x....             LDR.N    R2,??DataTable2_3
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x2003             MOVS     R0,#+3
   \   00000038   0x.... 0x....      BL       Oled_Putstr
   \   0000003C   0x....             LDR.N    R0,??DataTable2_4
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x0002             MOVS     R2,R0
   \   00000042   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000044   0x210B             MOVS     R1,#+11
   \   00000046   0x2003             MOVS     R0,#+3
   \   00000048   0x.... 0x....      BL       Oled_Putnum
     38            Oled_Putstr(4,0,"pit1 time"); Oled_Putnum(4,11,(s16)pit1_time);
   \   0000004C   0x....             LDR.N    R2,??DataTable2_5
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x2004             MOVS     R0,#+4
   \   00000052   0x.... 0x....      BL       Oled_Putstr
   \   00000056   0x....             LDR.N    R0,??DataTable2_6
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0002             MOVS     R2,R0
   \   0000005C   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   0000005E   0x210B             MOVS     R1,#+11
   \   00000060   0x2004             MOVS     R0,#+4
   \   00000062   0x.... 0x....      BL       Oled_Putnum
     39            Oled_Putstr(5,0,"tacho0"); Oled_Putnum(5,11,tacho0);
   \   00000066   0x....             LDR.N    R2,??DataTable2_7
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x2005             MOVS     R0,#+5
   \   0000006C   0x.... 0x....      BL       Oled_Putstr
   \   00000070   0x....             LDR.N    R0,??DataTable2_8
   \   00000072   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   00000076   0x210B             MOVS     R1,#+11
   \   00000078   0x2005             MOVS     R0,#+5
   \   0000007A   0x.... 0x....      BL       Oled_Putnum
     40            Oled_Putstr(6,0,"tacho1"); Oled_Putnum(6,11,tacho1);
   \   0000007E   0x....             LDR.N    R2,??DataTable2_9
   \   00000080   0x2100             MOVS     R1,#+0
   \   00000082   0x2006             MOVS     R0,#+6
   \   00000084   0x.... 0x....      BL       Oled_Putstr
   \   00000088   0x....             LDR.N    R0,??DataTable2_10
   \   0000008A   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   0000008E   0x210B             MOVS     R1,#+11
   \   00000090   0x2006             MOVS     R0,#+6
   \   00000092   0x.... 0x....      BL       Oled_Putnum
     41          
     42          #if (CAR_TYPE==0)   // Magnet and Balance
     43            
     44            Oled_Putstr(7,0,"accx"); Oled_Putnum(7,11,accx);
   \   00000096   0x....             LDR.N    R2,??DataTable2_11
   \   00000098   0x2100             MOVS     R1,#+0
   \   0000009A   0x2007             MOVS     R0,#+7
   \   0000009C   0x.... 0x....      BL       Oled_Putstr
   \   000000A0   0x....             LDR.N    R0,??DataTable2_12
   \   000000A2   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   000000A6   0x210B             MOVS     R1,#+11
   \   000000A8   0x2007             MOVS     R0,#+7
   \   000000AA   0x.... 0x....      BL       Oled_Putnum
     45            
     46          #elif (CAR_TYPE==1)     // CCD
     47            
     48            
     49          #else               // Camera
     50            
     51            Oled_Putstr(7,0,"cam"); Oled_Putnum(7,11,cam_buffer[20][40]);
     52            
     53          #endif
     54          }
   \   000000AE   0xBD01             POP      {R0,PC}          ;; return
     55          

   \                                 In section .text, align 2, keep-with-next
     56          void UI_Graph(u8* data){
     57            
     58          }
   \                     UI_Graph: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void displayCamera()
     61          {
   \                     displayCamera: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     62            drawCam(isWhite);
   \   00000002   0x.... 0x....      ADR.W    R0,isWhite
   \   00000006   0x.... 0x....      BL       drawCam
     63          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
     64          

   \                                 In section .text, align 2, keep-with-next
     65          void drawCam(boolean(*isTarget)(u8 x)) {
   \                     drawCam: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xF5AD 0x6D80      SUB      SP,SP,#+1024
   \   00000008   0xB081             SUB      SP,SP,#+4
   \   0000000A   0x0004             MOVS     R4,R0
     66            int row, col, i;
     67            u8 buf[IMG_COLS * IMG_ROWS /8];
     68            u8 *p = buf;
   \   0000000C   0xAD01             ADD      R5,SP,#+4
     69              
     70            for (row = IMG_ROWS-1; row >= 0; row -= 8) {
   \   0000000E   0x263F             MOVS     R6,#+63
   \   00000010   0xE000             B.N      ??drawCam_0
   \                     ??drawCam_1: (+1)
   \   00000012   0x3E08             SUBS     R6,R6,#+8
   \                     ??drawCam_0: (+1)
   \   00000014   0x2E00             CMP      R6,#+0
   \   00000016   0xD420             BMI.N    ??drawCam_2
     71              for (col = IMG_COLS-1; col >= 0 ; col--) {
   \   00000018   0x277F             MOVS     R7,#+127
   \   0000001A   0xE017             B.N      ??drawCam_3
     72                u8 tmp = 0;
     73                for (i = 0; i < 8; i++) {
     74                  tmp <<= 1;
   \                     ??drawCam_4: (+1)
   \   0000001C   0xEA5F 0x0949      LSLS     R9,R9,#+1
     75                  if (isTarget(cam_buffer[row-i][col]))
   \   00000020   0x....             LDR.N    R1,??DataTable2_13
   \   00000022   0xEBB6 0x0208      SUBS     R2,R6,R8
   \   00000026   0x2080             MOVS     R0,#+128
   \   00000028   0x4342             MULS     R2,R0,R2
   \   0000002A   0xEB01 0x0002      ADD      R0,R1,R2
   \   0000002E   0x5DC0             LDRB     R0,[R0, R7]
   \   00000030   0x47A0             BLX      R4
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD001             BEQ.N    ??drawCam_5
     76                    tmp |= 0x01;
   \   00000036   0xF059 0x0901      ORRS     R9,R9,#0x1
     77                }
   \                     ??drawCam_5: (+1)
   \   0000003A   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??drawCam_6: (+1)
   \   0000003E   0xF1B8 0x0F08      CMP      R8,#+8
   \   00000042   0xDBEB             BLT.N    ??drawCam_4
     78                *p++ = tmp;
   \   00000044   0xF885 0x9000      STRB     R9,[R5, #+0]
   \   00000048   0x1C6D             ADDS     R5,R5,#+1
   \   0000004A   0x1E7F             SUBS     R7,R7,#+1
   \                     ??drawCam_3: (+1)
   \   0000004C   0x2F00             CMP      R7,#+0
   \   0000004E   0xD4E0             BMI.N    ??drawCam_1
   \   00000050   0xF05F 0x0900      MOVS     R9,#+0
   \   00000054   0xF05F 0x0800      MOVS     R8,#+0
   \   00000058   0xE7F1             B.N      ??drawCam_6
     79              }
     80            }
     81            Oled_DrawBMP(0, 0,IMG_COLS, IMG_ROWS, buf);
   \                     ??drawCam_2: (+1)
   \   0000005A   0xA801             ADD      R0,SP,#+4
   \   0000005C   0x9000             STR      R0,[SP, #+0]
   \   0000005E   0x2340             MOVS     R3,#+64
   \   00000060   0x2280             MOVS     R2,#+128
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x.... 0x....      BL       Oled_DrawBMP
     82          }
   \   0000006A   0xF50D 0x6D80      ADD      SP,SP,#+1024
   \   0000006E   0xB001             ADD      SP,SP,#+4
   \   00000070   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
     83          
     84          

   \                                 In section .text, align 4, keep-with-next
     85          boolean isWhite(u8 x)
     86          {     //@@@@@@@@@@@@@@@@
     87            return x > thr;
   \                     isWhite: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable2_14
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x4281             CMP      R1,R0
   \   00000008   0xDA01             BGE.N    ??isWhite_0
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xE000             B.N      ??isWhite_1
   \                     ??isWhite_0: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
   \                     ??isWhite_1: (+1)
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x4770             BX       LR               ;; return
     88          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     battery

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     pit0_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     pit1_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     tacho0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     tacho1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     accx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x........         DC32     cam_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x........         DC32     thr

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x43 0x61          DC8 "Car Type"
   \              0x72 0x20    
   \              0x54 0x79    
   \              0x70 0x65    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x62 0x61          DC8 "battery"
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x79 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x70 0x69          DC8 "pit0 time"
   \              0x74 0x30    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x70 0x69          DC8 "pit1 time"
   \              0x74 0x31    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x74 0x61          DC8 "tacho0"
   \              0x63 0x68    
   \              0x6F 0x30    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x74 0x61          DC8 "tacho1"
   \              0x63 0x68    
   \              0x6F 0x31    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x61 0x63          DC8 "accx"
   \              0x63 0x78    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     89          
     90          
     91          
     92          
     93          
     94          
     95          
     96          
     97          
     98          
     99          
    100          
    101          
    102          
    103          
    104          
    105          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   UI_Graph
       8   UI_SystemInfo
         8   -> Oled_Putnum
         8   -> Oled_Putstr
       8   displayCamera
         8   -> drawCam
    1056   drawCam
      1056   -- Indirect call
      1056   -> Oled_DrawBMP
       0   isWhite


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      12  ?_0
       8  ?_1
      12  ?_2
      12  ?_3
       8  ?_4
       8  ?_5
       8  ?_6
       2  UI_Graph
     176  UI_SystemInfo
      12  displayCamera
     116  drawCam
      20  isWhite

 
  68 bytes in section .rodata
 386 bytes in section .text
 
 386 bytes of CODE  memory
  68 bytes of CONST memory

Errors: none
Warnings: 1
